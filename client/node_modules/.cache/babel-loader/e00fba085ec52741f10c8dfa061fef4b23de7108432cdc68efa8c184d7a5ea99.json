{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../node_modules/classnames/index.js';\nvar CHeaderBrand = forwardRef(function (_a, ref) {\n  var children = _a.children,\n    _b = _a.as,\n    Component = _b === void 0 ? 'a' : _b,\n    className = _a.className,\n    rest = __rest(_a, [\"children\", \"as\", \"className\"]);\n  return React.createElement(Component, __assign({\n    className: classNames('header-brand', className)\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCHeaderBrand.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nCHeaderBrand.displayName = 'CHeaderBrand';\nexport { CHeaderBrand };","map":{"version":3,"names":["CHeaderBrand","forwardRef","_a","ref","children","_b","as","Component","className","rest","__rest","React","createElement","__assign","classNames","propTypes","PropTypes","elementType","node","string","displayName"],"sources":["C:\\Users\\ritik\\OneDrive\\Desktop\\Video-Call-App\\client\\node_modules\\@coreui\\react\\src\\components\\header\\CHeaderBrand.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, AnchorHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CHeaderBrandProps\n  extends AnchorHTMLAttributes<HTMLAnchorElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CHeaderBrand: PolymorphicRefForwardingComponent<'a', CHeaderBrandProps> = forwardRef<\n  HTMLAnchorElement | HTMLSpanElement,\n  CHeaderBrandProps\n>(({ children, as: Component = 'a', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('header-brand', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCHeaderBrand.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCHeaderBrand.displayName = 'CHeaderBrand'\n"],"mappings":";;;;IAkBaA,YAAY,GAA8DC,UAAU,CAG/F,UAACC,EAAqD,EAAEC,GAAG;EAAxD,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IAAEC,EAAmB,GAAAH,EAAA,CAAAI,EAAA;IAAfC,SAAS,GAAGF,EAAA,iBAAG,GAAAA,EAAA;IAAEG,SAAS,GAAAN,EAAA,CAAAM,SAAA;IAAKC,IAAI,GAAAC,MAAA,CAAAR,EAAA,EAAnD,+BAAqD,CAAF;EACpD,OACES,KAAA,CAAAC,aAAA,CAACL,SAAS,EAAAM,QAAA;IAACL,SAAS,EAAEM,UAAU,CAAC,cAAc,EAAEN,SAAS;EAAC,CAAM,EAAAC,IAAI;IAAEN,GAAG,EAAEA;EAAG,CAC5E,GAAAC,QAAQ,CACC;AAEhB,CAAC;AAEDJ,YAAY,CAACe,SAAS,GAAG;EACvBT,EAAE,EAAEU,SAAS,CAACC,WAAW;EACzBb,QAAQ,EAAEY,SAAS,CAACE,IAAI;EACxBV,SAAS,EAAEQ,SAAS,CAACG;CACtB;AAEDnB,YAAY,CAACoB,WAAW,GAAG,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}