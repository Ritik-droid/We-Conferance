{"ast":null,"code":"import { __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CFormFeedback } from './CFormFeedback.js';\nvar CFormControlValidation = function (_a) {\n  var describedby = _a.describedby,\n    feedback = _a.feedback,\n    feedbackInvalid = _a.feedbackInvalid,\n    feedbackValid = _a.feedbackValid,\n    invalid = _a.invalid,\n    tooltipFeedback = _a.tooltipFeedback,\n    valid = _a.valid;\n  return React.createElement(React.Fragment, null, feedback && (valid || invalid) && React.createElement(CFormFeedback, __assign({}, invalid && {\n    id: describedby\n  }, {\n    invalid: invalid,\n    tooltip: tooltipFeedback,\n    valid: valid\n  }), feedback), feedbackInvalid && React.createElement(CFormFeedback, {\n    id: describedby,\n    invalid: true,\n    tooltip: tooltipFeedback\n  }, feedbackInvalid), feedbackValid && React.createElement(CFormFeedback, {\n    valid: true,\n    tooltip: tooltipFeedback\n  }, feedbackValid));\n};\nCFormControlValidation.propTypes = {\n  describedby: PropTypes.string,\n  feedback: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackValid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackInvalid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  invalid: PropTypes.bool,\n  tooltipFeedback: PropTypes.bool,\n  valid: PropTypes.bool\n};\nCFormControlValidation.displayName = 'CFormControlValidation';\nexport { CFormControlValidation };","map":{"version":3,"names":["CFormControlValidation","_a","describedby","feedback","feedbackInvalid","feedbackValid","invalid","tooltipFeedback","valid","React","createElement","Fragment","CFormFeedback","__assign","id","tooltip","propTypes","PropTypes","string","oneOfType","node","bool","displayName"],"sources":["C:\\Users\\ritik\\OneDrive\\Desktop\\Video-Call-App\\client\\node_modules\\@coreui\\react\\src\\components\\form\\CFormControlValidation.tsx"],"sourcesContent":["import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormFeedback } from './CFormFeedback'\n\nexport interface CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  describedby?: string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedback?: ReactNode | string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedbackInvalid?: ReactNode | string\n  /**\n   * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  feedbackValid?: ReactNode | string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * Display validation feedback in a styled tooltip.\n   *\n   * @since 4.2.0\n   */\n  tooltipFeedback?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormControlValidation: FC<CFormControlValidationProps> = ({\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  invalid,\n  tooltipFeedback,\n  valid,\n}) => {\n  return (\n    <>\n      {feedback && (valid || invalid) && (\n        <CFormFeedback\n          {...(invalid && { id: describedby })}\n          invalid={invalid}\n          tooltip={tooltipFeedback}\n          valid={valid}\n        >\n          {feedback}\n        </CFormFeedback>\n      )}\n      {feedbackInvalid && (\n        <CFormFeedback id={describedby} invalid tooltip={tooltipFeedback}>\n          {feedbackInvalid}\n        </CFormFeedback>\n      )}\n      {feedbackValid && (\n        <CFormFeedback valid tooltip={tooltipFeedback}>\n          {feedbackValid}\n        </CFormFeedback>\n      )}\n    </>\n  )\n}\n\nCFormControlValidation.propTypes = {\n  describedby: PropTypes.string,\n  feedback: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackValid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackInvalid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  invalid: PropTypes.bool,\n  tooltipFeedback: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormControlValidation.displayName = 'CFormControlValidation'\n"],"mappings":";;;;AAkDO,IAAMA,sBAAsB,GAAoC,SAAAA,CAACC,EAQvE;EAPC,IAAAC,WAAW,GAAAD,EAAA,CAAAC,WAAA;IACXC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IACRC,eAAe,GAAAH,EAAA,CAAAG,eAAA;IACfC,aAAa,GAAAJ,EAAA,CAAAI,aAAA;IACbC,OAAO,GAAAL,EAAA,CAAAK,OAAA;IACPC,eAAe,GAAAN,EAAA,CAAAM,eAAA;IACfC,KAAK,GAAAP,EAAA,CAAAO,KAAA;EAEL,OACEC,KAAA,CAAAC,aAAA,CAAAD,KAAA,CAAAE,QAAA,QACGR,QAAQ,KAAKK,KAAK,IAAIF,OAAO,CAAC,IAC7BG,KAAA,CAAAC,aAAA,CAACE,aAAa,EACRC,QAAA,KAACP,OAAO,IAAI;IAAEQ,EAAE,EAAEZ;EAAW,CAAE,EACnC;IAAAI,OAAO,EAAEA,OAAO;IAChBS,OAAO,EAAER,eAAe;IACxBC,KAAK,EAAEA;EAAK,CAEX,GAAAL,QAAQ,CAEZ,EACAC,eAAe,IACdK,KAAA,CAAAC,aAAA,CAACE,aAAa;IAACE,EAAE,EAAEZ,WAAW;IAAEI,OAAO;IAACS,OAAO,EAAER;EAAe,CAC7D,EAAAH,eAAe,CAEnB,EACAC,aAAa,IACZI,KAAA,CAAAC,aAAA,CAACE,aAAa;IAACJ,KAAK,EAAC;IAAAO,OAAO,EAAER;EAAe,GAC1CF,aAAa,CAEjB,CACA;AAEP;AAEAL,sBAAsB,CAACgB,SAAS,GAAG;EACjCd,WAAW,EAAEe,SAAS,CAACC,MAAM;EAC7Bf,QAAQ,EAAEc,SAAS,CAACE,SAAS,CAAC,CAACF,SAAS,CAACG,IAAI,EAAEH,SAAS,CAACC,MAAM,CAAC,CAAC;EACjEb,aAAa,EAAEY,SAAS,CAACE,SAAS,CAAC,CAACF,SAAS,CAACG,IAAI,EAAEH,SAAS,CAACC,MAAM,CAAC,CAAC;EACtEd,eAAe,EAAEa,SAAS,CAACE,SAAS,CAAC,CAACF,SAAS,CAACG,IAAI,EAAEH,SAAS,CAACC,MAAM,CAAC,CAAC;EACxEZ,OAAO,EAAEW,SAAS,CAACI,IAAI;EACvBd,eAAe,EAAEU,SAAS,CAACI,IAAI;EAC/Bb,KAAK,EAAES,SAAS,CAACI;CAClB;AAEDrB,sBAAsB,CAACsB,WAAW,GAAG,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}