{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../node_modules/classnames/index.js';\nimport { colorPropType } from '../../props.js';\nvar CSpinner = forwardRef(function (_a, ref) {\n  var _b;\n  var _c = _a.as,\n    Component = _c === void 0 ? 'div' : _c,\n    className = _a.className,\n    color = _a.color,\n    size = _a.size,\n    _d = _a.variant,\n    variant = _d === void 0 ? 'border' : _d,\n    _e = _a.visuallyHiddenLabel,\n    visuallyHiddenLabel = _e === void 0 ? 'Loading...' : _e,\n    rest = __rest(_a, [\"as\", \"className\", \"color\", \"size\", \"variant\", \"visuallyHiddenLabel\"]);\n  return React.createElement(Component, __assign({\n    className: classNames(\"spinner-\".concat(variant), (_b = {}, _b[\"spinner-\".concat(variant, \"-\").concat(size)] = size, _b[\"text-\".concat(color)] = color, _b), className),\n    role: \"status\"\n  }, rest, {\n    ref: ref\n  }), React.createElement(\"span\", {\n    className: \"visually-hidden\"\n  }, visuallyHiddenLabel));\n});\nCSpinner.propTypes = {\n  as: PropTypes.string,\n  className: PropTypes.string,\n  color: colorPropType,\n  size: PropTypes.oneOf(['sm']),\n  variant: PropTypes.oneOf(['border', 'grow']),\n  visuallyHiddenLabel: PropTypes.string\n};\nCSpinner.displayName = 'CSpinner';\nexport { CSpinner };","map":{"version":3,"names":["CSpinner","forwardRef","_a","ref","_c","as","Component","className","color","size","_d","variant","_e","visuallyHiddenLabel","rest","__rest","React","createElement","__assign","classNames","concat","_b","role","propTypes","PropTypes","string","colorPropType","oneOf","displayName"],"sources":["/root/Desktop/We-Conferance/client/node_modules/@coreui/react/src/components/spinner/CSpinner.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CSpinnerProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUIâ€™s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Size the component small.\n   */\n  size?: 'sm'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'border' | 'grow'\n  /**\n   * Set visually hidden label for accessibility purposes.\n   */\n  visuallyHiddenLabel?: string\n}\n\nexport const CSpinner: PolymorphicRefForwardingComponent<'div', CSpinnerProps> = forwardRef<\n  HTMLDivElement | HTMLSpanElement,\n  CSpinnerProps\n>(\n  (\n    {\n      as: Component = 'div',\n      className,\n      color,\n      size,\n      variant = 'border',\n      visuallyHiddenLabel = 'Loading...',\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <Component\n        className={classNames(\n          `spinner-${variant}`,\n          {\n            [`spinner-${variant}-${size}`]: size,\n            [`text-${color}`]: color,\n          },\n          className,\n        )}\n        role=\"status\"\n        {...rest}\n        ref={ref}\n      >\n        <span className=\"visually-hidden\">{visuallyHiddenLabel}</span>\n      </Component>\n    )\n  },\n)\n\nCSpinner.propTypes = {\n  as: PropTypes.string,\n  className: PropTypes.string,\n  color: colorPropType,\n  size: PropTypes.oneOf(['sm']),\n  variant: PropTypes.oneOf(['border', 'grow']),\n  visuallyHiddenLabel: PropTypes.string,\n}\n\nCSpinner.displayName = 'CSpinner'\n"],"mappings":";;;;;IAqCaA,QAAQ,GAA4DC,UAAU,CAIzF,UACEC,EAQC,EACDC,GAAG;;EARD,IAAAC,EAAqB,GAAAF,EAAA,CAAAG,EAAA;IAAjBC,SAAS,GAAAF,EAAA,cAAG,KAAK,GAAAA,EAAA;IACrBG,SAAS,GAAAL,EAAA,CAAAK,SAAA;IACTC,KAAK,GAAAN,EAAA,CAAAM,KAAA;IACLC,IAAI,GAAAP,EAAA,CAAAO,IAAA;IACJC,EAAkB,GAAAR,EAAA,CAAAS,OAAA;IAAlBA,OAAO,GAAAD,EAAA,cAAG,QAAQ,GAAAA,EAAA;IAClBE,EAAkC,GAAAV,EAAA,CAAAW,mBAAA;IAAlCA,mBAAmB,GAAAD,EAAA,cAAG,YAAY,GAAAA,EAAA;IAC/BE,IAAI,GAAAC,MAAA,CAAAb,EAAA,EAPT,sEAQC,CADQ;EAIT,OACEc,KAAC,CAAAC,aAAA,CAAAX,SAAS,EACRY,QAAA;IAAAX,SAAS,EAAEY,UAAU,CACnB,UAAW,CAAAC,MAAA,CAAAT,OAAO,CAAE,GAAAU,EAAA,OAElBA,EAAA,CAAC,WAAAD,MAAA,CAAWT,OAAO,OAAAS,MAAA,CAAIX,IAAI,CAAE,IAAGA,IAAI,EACpCY,EAAA,CAAC,OAAQ,CAAAD,MAAA,CAAAZ,KAAK,CAAE,IAAGA,KAAK,E,KAE1BD,SAAS,CACV;IACDe,IAAI,EAAC;EAAQ,GACTR,IAAI;IACRX,GAAG,EAAEA;EAAG,IAERa,KAAM,CAAAC,aAAA;IAAAV,SAAS,EAAC;EAAiB,GAAEM,mBAAmB,CAAQ,CACpD;AAEhB,CAAC;AAGHb,QAAQ,CAACuB,SAAS,GAAG;EACnBlB,EAAE,EAAEmB,SAAS,CAACC,MAAM;EACpBlB,SAAS,EAAEiB,SAAS,CAACC,MAAM;EAC3BjB,KAAK,EAAEkB,aAAa;EACpBjB,IAAI,EAAEe,SAAS,CAACG,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC;EAC7BhB,OAAO,EAAEa,SAAS,CAACG,KAAK,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;EAC5Cd,mBAAmB,EAAEW,SAAS,CAACC;CAChC;AAEDzB,QAAQ,CAAC4B,WAAW,GAAG,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}