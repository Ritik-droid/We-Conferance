{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../node_modules/classnames/index.js';\nimport { CCloseButton } from '../close-button/CCloseButton.js';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport '@popperjs/core';\nimport { colorPropType } from '../../props.js';\nimport Transition from '../../node_modules/react-transition-group/esm/Transition.js';\nvar CAlert = forwardRef(function (_a, ref) {\n  var children = _a.children,\n    className = _a.className,\n    _b = _a.color,\n    color = _b === void 0 ? 'primary' : _b,\n    dismissible = _a.dismissible,\n    variant = _a.variant,\n    _c = _a.visible,\n    visible = _c === void 0 ? true : _c,\n    onClose = _a.onClose,\n    rest = __rest(_a, [\"children\", \"className\", \"color\", \"dismissible\", \"variant\", \"visible\", \"onClose\"]);\n  var alertRef = useRef(null);\n  var forkedRef = useForkedRef(ref, alertRef);\n  var _d = useState(visible),\n    _visible = _d[0],\n    setVisible = _d[1];\n  useEffect(function () {\n    setVisible(visible);\n  }, [visible]);\n  return React.createElement(Transition, {\n    in: _visible,\n    mountOnEnter: true,\n    nodeRef: alertRef,\n    onExit: onClose,\n    timeout: 150,\n    unmountOnExit: true\n  }, function (state) {\n    return React.createElement(\"div\", __assign({\n      className: classNames('alert', variant === 'solid' ? \"bg-\".concat(color, \" text-white\") : \"alert-\".concat(color), {\n        'alert-dismissible fade': dismissible,\n        show: state === 'entered'\n      }, className),\n      role: \"alert\"\n    }, rest, {\n      ref: forkedRef\n    }), children, dismissible && React.createElement(CCloseButton, {\n      onClick: function () {\n        return setVisible(false);\n      }\n    }));\n  });\n});\nCAlert.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType.isRequired,\n  dismissible: PropTypes.bool,\n  onClose: PropTypes.func,\n  variant: PropTypes.string,\n  visible: PropTypes.bool\n};\nCAlert.displayName = 'CAlert';\nexport { CAlert };","map":{"version":3,"names":["CAlert","forwardRef","_a","ref","children","className","_b","color","dismissible","variant","_c","visible","onClose","rest","__rest","alertRef","useRef","forkedRef","useForkedRef","_d","useState","_visible","setVisible","useEffect","React","createElement","Transition","in","mountOnEnter","nodeRef","onExit","timeout","unmountOnExit","state","__assign","classNames","concat","show","role","CCloseButton","onClick","propTypes","PropTypes","node","string","colorPropType","isRequired","bool","func","displayName"],"sources":["C:\\Users\\ritik\\OneDrive\\Desktop\\Video-Call-App\\client\\node_modules\\@coreui\\react\\src\\components\\alert\\CAlert.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, useEffect, useState, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { CCloseButton } from '../close-button/CCloseButton'\n\nimport { useForkedRef } from '../../hooks'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CAlertProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUIâ€™s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color: Colors\n  /**\n   * Optionally add a close button to alert and allow it to self dismiss.\n   */\n  dismissible?: boolean\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClose?: () => void\n  /**\n   * Set the alert variant to a solid.\n   */\n  variant?: 'solid' | string\n  /**\n   * Toggle the visibility of component.\n   */\n  visible?: boolean\n}\n\nexport const CAlert = forwardRef<HTMLDivElement, CAlertProps>(\n  (\n    {\n      children,\n      className,\n      color = 'primary',\n      dismissible,\n      variant,\n      visible = true,\n      onClose,\n      ...rest\n    },\n    ref,\n  ) => {\n    const alertRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, alertRef)\n    const [_visible, setVisible] = useState(visible)\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    return (\n      <Transition\n        in={_visible}\n        mountOnEnter\n        nodeRef={alertRef}\n        onExit={onClose}\n        timeout={150}\n        unmountOnExit\n      >\n        {(state) => (\n          <div\n            className={classNames(\n              'alert',\n              variant === 'solid' ? `bg-${color} text-white` : `alert-${color}`,\n              {\n                'alert-dismissible fade': dismissible,\n                show: state === 'entered',\n              },\n              className,\n            )}\n            role=\"alert\"\n            {...rest}\n            ref={forkedRef}\n          >\n            {children}\n            {dismissible && <CCloseButton onClick={() => setVisible(false)} />}\n          </div>\n        )}\n      </Transition>\n    )\n  },\n)\n\nCAlert.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType.isRequired,\n  dismissible: PropTypes.bool,\n  onClose: PropTypes.func,\n  variant: PropTypes.string,\n  visible: PropTypes.bool,\n}\n\nCAlert.displayName = 'CAlert'\n"],"mappings":";;;;;;;;;IAwCaA,MAAM,GAAGC,UAAU,CAC9B,UACEC,EASC,EACDC,GAAG;EATD,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IACRC,SAAS,GAAAH,EAAA,CAAAG,SAAA;IACTC,EAAA,GAAAJ,EAAA,CAAAK,KAAiB;IAAjBA,KAAK,GAAGD,EAAA,uBAAS,GAAAA,EAAA;IACjBE,WAAW,GAAAN,EAAA,CAAAM,WAAA;IACXC,OAAO,GAAAP,EAAA,CAAAO,OAAA;IACPC,EAAA,GAAAR,EAAA,CAAAS,OAAc;IAAdA,OAAO,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IACdE,OAAO,GAAAV,EAAA,CAAAU,OAAA;IACJC,IAAI,GAAAC,MAAA,CAAAZ,EAAA,EART,kFASC,CADQ;EAIT,IAAMa,QAAQ,GAAGC,MAAM,CAAiB,IAAI,CAAC;EAC7C,IAAMC,SAAS,GAAGC,YAAY,CAACf,GAAG,EAAEY,QAAQ,CAAC;EACvC,IAAAI,EAAA,GAAyBC,QAAQ,CAACT,OAAO,CAAC;IAAzCU,QAAQ,GAAAF,EAAA;IAAEG,UAAU,GAAAH,EAAA,GAAqB;EAEhDI,SAAS,CAAC;IACRD,UAAU,CAACX,OAAO,CAAC;EACrB,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEb,OACEa,KAAA,CAAAC,aAAA,CAACC,UAAU;IACTC,EAAE,EAAEN,QAAQ;IACZO,YAAY,EACZ;IAAAC,OAAO,EAAEd,QAAQ;IACjBe,MAAM,EAAElB,OAAO;IACfmB,OAAO,EAAE,GAAG;IACZC,aAAa,EAEZ;EAAA,aAACC,KAAK,EAAK;IAAA,OACVT,KAAA,CAAAC,aAAA,QAAAS,QAAA;MACE7B,SAAS,EAAE8B,UAAU,CACnB,OAAO,EACP1B,OAAO,KAAK,OAAO,GAAG,KAAM,CAAA2B,MAAA,CAAA7B,KAAK,EAAa,iBAAG,SAAA6B,MAAA,CAAS7B,KAAK,CAAE,EACjE;QACE,wBAAwB,EAAEC,WAAW;QACrC6B,IAAI,EAAEJ,KAAK,KAAK;OACjB,EACD5B,SAAS,CACV;MACDiC,IAAI,EAAC;IAAO,GACRzB,IAAI;MACRV,GAAG,EAAEc;IAAS,IAEbb,QAAQ,EACRI,WAAW,IAAIgB,KAAA,CAAAC,aAAA,CAACc,YAAY;MAACC,OAAO,EAAE,SAAAA,CAAA;QAAM,OAAAlB,UAAU,CAAC,KAAK,CAAC;MAAA;IAAA,CAAI,EAC9D;EAjBI,CAkBX,CACU;AAEjB,CAAC;AAGHtB,MAAM,CAACyC,SAAS,GAAG;EACjBrC,QAAQ,EAAEsC,SAAS,CAACC,IAAI;EACxBtC,SAAS,EAAEqC,SAAS,CAACE,MAAM;EAC3BrC,KAAK,EAAEsC,aAAa,CAACC,UAAU;EAC/BtC,WAAW,EAAEkC,SAAS,CAACK,IAAI;EAC3BnC,OAAO,EAAE8B,SAAS,CAACM,IAAI;EACvBvC,OAAO,EAAEiC,SAAS,CAACE,MAAM;EACzBjC,OAAO,EAAE+B,SAAS,CAACK;CACpB;AAED/C,MAAM,CAACiD,WAAW,GAAG,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}