{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { CCard } from '../card/CCard.js';\nimport { CCardBody } from '../card/CCardBody.js';\nimport '../card/CCardFooter.js';\nimport '../card/CCardGroup.js';\nimport '../card/CCardHeader.js';\nimport '../card/CCardImage.js';\nimport '../card/CCardImageOverlay.js';\nimport '../card/CCardLink.js';\nimport '../card/CCardSubtitle.js';\nimport '../card/CCardText.js';\nimport '../card/CCardTitle.js';\nimport { CProgress } from '../progress/CProgress.js';\nimport { colorPropType } from '../../props.js';\nimport classNames from '../../node_modules/classnames/index.js';\nvar CWidgetStatsC = forwardRef(function (_a, ref) {\n  var className = _a.className,\n    color = _a.color,\n    icon = _a.icon,\n    inverse = _a.inverse,\n    progress = _a.progress,\n    title = _a.title,\n    value = _a.value,\n    rest = __rest(_a, [\"className\", \"color\", \"icon\", \"inverse\", \"progress\", \"title\", \"value\"]);\n  return React.createElement(CCard, __assign({\n    className: className,\n    color: color\n  }, inverse && {\n    textColor: 'white'\n  }, rest, {\n    ref: ref\n  }), React.createElement(CCardBody, null, icon && React.createElement(\"div\", {\n    className: classNames('text-end mb-4', inverse ? 'text-white text-opacity-75' : 'text-body-secondary')\n  }, icon), value && React.createElement(\"div\", {\n    className: \"fs-4 fw-semibold\"\n  }, value), title && React.createElement(\"div\", {\n    className: inverse ? 'text-white text-opacity-75' : 'text-body-secondary'\n  }, title), React.createElement(CProgress, __assign({\n    className: \"mt-3 mb-0\",\n    height: 4\n  }, inverse && {\n    white: true\n  }, progress))));\n});\nCWidgetStatsC.propTypes = {\n  className: PropTypes.string,\n  color: colorPropType,\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  inverse: PropTypes.bool,\n  progress: PropTypes.object,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.number])\n};\nCWidgetStatsC.displayName = 'CWidgetStatsCWidgetStatsC';\nexport { CWidgetStatsC };","map":{"version":3,"names":["CWidgetStatsC","forwardRef","_a","ref","className","color","icon","inverse","progress","title","value","rest","__rest","React","createElement","CCard","__assign","textColor","CCardBody","classNames","CProgress","height","white","propTypes","PropTypes","string","colorPropType","oneOfType","node","bool","object","number","displayName"],"sources":["/root/Desktop/We-Conferance/client/node_modules/@coreui/react/src/components/widgets/CWidgetStatsC.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CCard, CCardBody } from '../card'\nimport { CProgress, CProgressProps } from '../progress/CProgress'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\nimport classNames from 'classnames'\n\nexport interface CWidgetStatsCProps extends Omit<HTMLAttributes<HTMLDivElement>, 'title'> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Icon node for your component.\n   */\n  icon?: string | ReactNode\n  /**\n   * Colors have been inverted from their default dark shade.\n   */\n  inverse?: boolean\n  /**\n   * Sets the color context of the progress bar to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  progress?: CProgressProps\n  /**\n   * Title node for your component.\n   */\n  title?: string | ReactNode\n  /**\n   * Value node for your component.\n   */\n  value?: string | number | ReactNode\n}\n\nexport const CWidgetStatsC = forwardRef<HTMLDivElement, CWidgetStatsCProps>(\n  ({ className, color, icon, inverse, progress, title, value, ...rest }, ref) => {\n    return (\n      <CCard\n        className={className}\n        color={color}\n        {...(inverse && { textColor: 'white' })}\n        {...rest}\n        ref={ref}\n      >\n        <CCardBody>\n          {icon && (\n            <div\n              className={classNames(\n                'text-end mb-4',\n                inverse ? 'text-white text-opacity-75' : 'text-body-secondary',\n              )}\n            >\n              {icon}\n            </div>\n          )}\n          {value && <div className=\"fs-4 fw-semibold\">{value}</div>}\n          {title && (\n            <div className={inverse ? 'text-white text-opacity-75' : 'text-body-secondary'}>\n              {title}\n            </div>\n          )}\n          <CProgress\n            className=\"mt-3 mb-0\"\n            height={4}\n            {...(inverse && { white: true })}\n            {...progress}\n          />\n        </CCardBody>\n      </CCard>\n    )\n  },\n)\n\nCWidgetStatsC.propTypes = {\n  className: PropTypes.string,\n  color: colorPropType,\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  inverse: PropTypes.bool,\n  progress: PropTypes.object,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.number]),\n}\n\nCWidgetStatsC.displayName = 'CWidgetStatsCWidgetStatsC'\n"],"mappings":";;;;;;;;;;;;;;;;;IA6CaA,aAAa,GAAGC,UAAU,CACrC,UAACC,EAAoE,EAAEC,GAAG;EAAvE,IAAAC,SAAS,GAAAF,EAAA,CAAAE,SAAA;IAAEC,KAAK,GAAAH,EAAA,CAAAG,KAAA;IAAEC,IAAI,GAAAJ,EAAA,CAAAI,IAAA;IAAEC,OAAO,GAAAL,EAAA,CAAAK,OAAA;IAAEC,QAAQ,GAAAN,EAAA,CAAAM,QAAA;IAAEC,KAAK,GAAAP,EAAA,CAAAO,KAAA;IAAEC,KAAK,GAAAR,EAAA,CAAAQ,KAAA;IAAKC,IAAI,GAAlEC,MAAA,CAAAV,EAAA,yEAAoE,CAAF;EACjE,OACEW,KAAC,CAAAC,aAAA,CAAAC,KAAK,EACJC,QAAA;IAAAZ,SAAS,EAAEA,SAAS;IACpBC,KAAK,EAAEA;EAAK,CACR,EAACE,OAAO,IAAI;IAAEU,SAAS,EAAE;EAAO,CAAE,EAClCN,IAAI;IACRR,GAAG,EAAEA;EAAG,IAERU,KAAA,CAAAC,aAAA,CAACI,SAAS,QACPZ,IAAI,IACHO,KACE,CAAAC,aAAA;IAAAV,SAAS,EAAEe,UAAU,CACnB,eAAe,EACfZ,OAAO,GAAG,4BAA4B,GAAG,qBAAqB;EAC/D,GAEAD,IAAI,CAER,EACAI,KAAK,IAAIG,KAAK,CAAAC,aAAA;IAAAV,SAAS,EAAC;EAAkB,GAAEM,KAAK,CAAO,EACxDD,KAAK,IACJI,KAAA,CAAAC,aAAA;IAAKV,SAAS,EAAEG,OAAO,GAAG,4BAA4B,GAAG;EAAqB,CAC3E,EAAAE,KAAK,CAET,EACDI,KAAC,CAAAC,aAAA,CAAAM,SAAS,EACRJ,QAAA;IAAAZ,SAAS,EAAC,WAAW;IACrBiB,MAAM,EAAE;EAAC,GACJd,OAAO,IAAI;IAAEe,KAAK,EAAE;EAAI,CAAE,EAC3Bd,QAAQ,CACZ,EACQ,CACN;AAEZ,CAAC;AAGHR,aAAa,CAACuB,SAAS,GAAG;EACxBnB,SAAS,EAAEoB,SAAS,CAACC,MAAM;EAC3BpB,KAAK,EAAEqB,aAAa;EACpBpB,IAAI,EAAEkB,SAAS,CAACG,SAAS,CAAC,CAACH,SAAS,CAACC,MAAM,EAAED,SAAS,CAACI,IAAI,CAAC,CAAC;EAC7DrB,OAAO,EAAEiB,SAAS,CAACK,IAAI;EACvBrB,QAAQ,EAAEgB,SAAS,CAACM,MAAM;EAC1BrB,KAAK,EAAEe,SAAS,CAACG,SAAS,CAAC,CAACH,SAAS,CAACC,MAAM,EAAED,SAAS,CAACI,IAAI,CAAC,CAAC;EAC9DlB,KAAK,EAAEc,SAAS,CAACG,SAAS,CAAC,CAACH,SAAS,CAACC,MAAM,EAAED,SAAS,CAACI,IAAI,EAAEJ,SAAS,CAACO,MAAM,CAAC;CAChF;AAED/B,aAAa,CAACgC,WAAW,GAAG,2BAA2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}