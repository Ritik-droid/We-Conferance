{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../node_modules/classnames/index.js';\nimport { CLink } from '../link/CLink.js';\nimport { colorPropType } from '../../props.js';\nvar CListGroupItem = forwardRef(function (_a, ref) {\n  var _b;\n  var children = _a.children,\n    active = _a.active,\n    _c = _a.as,\n    as = _c === void 0 ? 'li' : _c,\n    className = _a.className,\n    disabled = _a.disabled,\n    color = _a.color,\n    rest = __rest(_a, [\"children\", \"active\", \"as\", \"className\", \"disabled\", \"color\"]);\n  var Component = as === 'a' || as === 'button' ? CLink : as;\n  rest = __assign(__assign(__assign(__assign({}, (as === 'a' || as === 'button') && {\n    active: active,\n    disabled: disabled,\n    as: as,\n    ref: ref\n  }), active && {\n    'aria-current': true\n  }), disabled && {\n    'aria-disabled': true\n  }), rest);\n  return React.createElement(Component, __assign({\n    className: classNames('list-group-item', (_b = {}, _b[\"list-group-item-\".concat(color)] = color, _b['list-group-item-action'] = as === 'a' || as === 'button', _b.active = active, _b.disabled = disabled, _b), className)\n  }, rest), children);\n});\nCListGroupItem.propTypes = {\n  active: PropTypes.bool,\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  disabled: PropTypes.bool\n};\nCListGroupItem.displayName = 'CListGroupItem';\nexport { CListGroupItem };","map":{"version":3,"names":["CListGroupItem","forwardRef","_a","ref","children","active","_c","as","className","disabled","color","rest","__rest","Component","CLink","__assign","React","createElement","classNames","_b","concat","propTypes","PropTypes","bool","elementType","node","string","colorPropType","displayName"],"sources":["C:\\Users\\ritik\\OneDrive\\Desktop\\Video-Call-App\\client\\node_modules\\@coreui\\react\\src\\components\\list-group\\CListGroupItem.tsx"],"sourcesContent":["import React, { ElementType, AnchorHTMLAttributes, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CLink } from '../link/CLink'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CListGroupItemProps\n  extends AnchorHTMLAttributes<HTMLLIElement | HTMLAnchorElement | HTMLButtonElement> {\n  /**\n   * Toggle the active state for the component.\n   */\n  active?: boolean\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUIâ€™s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n}\n\nexport const CListGroupItem: PolymorphicRefForwardingComponent<'li', CListGroupItemProps> =\n  forwardRef<HTMLLIElement | HTMLAnchorElement | HTMLButtonElement, CListGroupItemProps>(\n    ({ children, active, as = 'li', className, disabled, color, ...rest }, ref) => {\n      const Component = as === 'a' || as === 'button' ? CLink : as\n\n      rest = {\n        ...((as === 'a' || as === 'button') && {\n          active,\n          disabled,\n          as,\n          ref: ref,\n        }),\n        ...(active && { 'aria-current': true }),\n        ...(disabled && { 'aria-disabled': true }),\n        ...rest,\n      }\n\n      return (\n        <Component\n          className={classNames(\n            'list-group-item',\n            {\n              [`list-group-item-${color}`]: color,\n              'list-group-item-action': as === 'a' || as === 'button',\n              active,\n              disabled,\n            },\n            className,\n          )}\n          {...rest}\n        >\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCListGroupItem.propTypes = {\n  active: PropTypes.bool,\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  disabled: PropTypes.bool,\n}\n\nCListGroupItem.displayName = 'CListGroupItem'\n"],"mappings":";;;;;;IAoCaA,cAAc,GACzBC,UAAU,CACR,UAACC,EAAoE,EAAEC,GAAG;;EAAvE,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IAAEC,MAAM,GAAAH,EAAA,CAAAG,MAAA;IAAEC,EAAS,GAAAJ,EAAA,CAAAK,EAAA;IAATA,EAAE,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IAAEE,SAAS,GAAAN,EAAA,CAAAM,SAAA;IAAEC,QAAQ,GAAAP,EAAA,CAAAO,QAAA;IAAEC,KAAK,GAAAR,EAAA,CAAAQ,KAAA;IAAKC,IAAI,GAAlEC,MAAA,CAAAV,EAAA,gEAAoE,CAAF;EACjE,IAAMW,SAAS,GAAGN,EAAE,KAAK,GAAG,IAAIA,EAAE,KAAK,QAAQ,GAAGO,KAAK,GAAGP,EAAE;EAE5DI,IAAI,GAAAI,QAAA,CAAAA,QAAA,CAAAA,QAAA,CAAAA,QAAA,KACE,CAACR,EAAE,KAAK,GAAG,IAAIA,EAAE,KAAK,QAAQ,KAAK;IACrCF,MAAM,EAAAA,MAAA;IACNI,QAAQ,EAAAA,QAAA;IACRF,EAAE,EAAAA,EAAA;IACFJ,GAAG,EAAEA;GACN,CAAC,EACEE,MAAM,IAAI;IAAE,cAAc,EAAE;EAAI,CAAE,CAAC,EACnCI,QAAQ,IAAI;IAAE,eAAe,EAAE;EAAI,CAAE,CAAC,EACvCE,IAAI,CACR;EAED,OACEK,KAAA,CAAAC,aAAA,CAACJ,SAAS,EAAAE,QAAA;IACRP,SAAS,EAAEU,UAAU,CACnB,iBAAiB,GAAAC,EAAA,OAEfA,EAAA,CAAC,kBAAmB,CAAAC,MAAA,CAAAV,KAAK,CAAE,IAAGA,KAAK,EACnCS,EAAA,0BAAwB,GAAEZ,EAAE,KAAK,GAAG,IAAIA,EAAE,KAAK,QAAQ,EACvDY,EAAA,CAAAd,MAAM,GAAAA,MAAA,EACNc,EAAA,CAAAV,QAAQ,GAAAA,QAAA,EAEVU,EAAA,GAAAX,SAAS;EACV,CACG,EAAAG,IAAI,GAEPP,QAAQ,CACC;AAEhB,CAAC;AAGLJ,cAAc,CAACqB,SAAS,GAAG;EACzBhB,MAAM,EAAEiB,SAAS,CAACC,IAAI;EACtBhB,EAAE,EAAEe,SAAS,CAACE,WAAW;EACzBpB,QAAQ,EAAEkB,SAAS,CAACG,IAAI;EACxBjB,SAAS,EAAEc,SAAS,CAACI,MAAM;EAC3BhB,KAAK,EAAEiB,aAAa;EACpBlB,QAAQ,EAAEa,SAAS,CAACC;CACrB;AAEDvB,cAAc,CAAC4B,WAAW,GAAG,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}