{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../node_modules/classnames/index.js';\nimport { CProgressStackedContext } from './CProgressStacked.js';\nimport { CProgressBar } from './CProgressBar.js';\nvar CProgress = forwardRef(function (_a, ref) {\n  var children = _a.children,\n    className = _a.className,\n    height = _a.height,\n    progressBarClassName = _a.progressBarClassName,\n    thin = _a.thin,\n    value = _a.value,\n    white = _a.white,\n    rest = __rest(_a, [\"children\", \"className\", \"height\", \"progressBarClassName\", \"thin\", \"value\", \"white\"]);\n  var stacked = useContext(CProgressStackedContext).stacked;\n  return React.createElement(\"div\", __assign({\n    className: classNames('progress', {\n      'progress-thin': thin,\n      'progress-white': white\n    }, className)\n  }, value !== undefined && {\n    role: 'progressbar',\n    'aria-valuenow': value,\n    'aria-valuemin': 0,\n    'aria-valuemax': 100\n  }, {\n    style: __assign(__assign({}, height ? {\n      height: \"\".concat(height, \"px\")\n    } : {}), stacked ? {\n      width: \"\".concat(value, \"%\")\n    } : {}),\n    ref: ref\n  }), React.Children.toArray(children).some(\n  // @ts-expect-error displayName is set in the CProgressBar component\n  function (child) {\n    return child.type && child.type.displayName === 'CProgressBar';\n  }) ? React.Children.map(children, function (child) {\n    // @ts-expect-error displayName is set in the CProgressBar component\n    if (React.isValidElement(child) && child.type.displayName === 'CProgressBar') {\n      return React.cloneElement(child, __assign(__assign({}, value && {\n        value: value\n      }), rest));\n    }\n    return;\n  }) : React.createElement(CProgressBar, __assign({}, progressBarClassName && {\n    className: progressBarClassName\n  }, {\n    value: value\n  }, rest), children));\n});\nCProgress.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  height: PropTypes.number,\n  progressBarClassName: PropTypes.string,\n  thin: PropTypes.bool,\n  value: PropTypes.number,\n  white: PropTypes.bool\n};\nCProgress.displayName = 'CProgress';\nexport { CProgress };","map":{"version":3,"names":["CProgress","forwardRef","_a","ref","children","className","height","progressBarClassName","thin","value","white","rest","__rest","stacked","useContext","CProgressStackedContext","React","createElement","__assign","classNames","undefined","role","style","concat","width","Children","toArray","some","child","type","displayName","map","isValidElement","cloneElement","CProgressBar","propTypes","PropTypes","node","string","number","bool"],"sources":["C:\\Users\\ritik\\OneDrive\\Desktop\\We-Conferance\\client\\node_modules\\@coreui\\react\\src\\components\\progress\\CProgress.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CProgressStackedContext } from './CProgressStacked'\nimport { CProgressBar, CProgressBarProps } from './CProgressBar'\n\nexport interface CProgressProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, 'color'>,\n    CProgressBarProps {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the height of the component. If you set that value the inner `<CProgressBar>` will automatically resize accordingly.\n   */\n  height?: number\n  /**\n   * A string of all className you want applied to the <CProgressBar/> component.\n   *\n   * @since 4.9.0\n   */\n  progressBarClassName?: string\n  /**\n   * Makes progress bar thinner.\n   */\n  thin?: boolean\n  /**\n   * The percent to progress the ProgressBar (out of 100).\n   */\n  value?: number\n  /**\n   * Change the default color to white.\n   */\n  white?: boolean\n}\n\nexport const CProgress = forwardRef<HTMLDivElement, CProgressProps>(\n  ({ children, className, height, progressBarClassName, thin, value, white, ...rest }, ref) => {\n    const { stacked } = useContext(CProgressStackedContext)\n\n    return (\n      <div\n        className={classNames(\n          'progress',\n          {\n            'progress-thin': thin,\n            'progress-white': white,\n          },\n          className,\n        )}\n        {...(value !== undefined && {\n          role: 'progressbar',\n          'aria-valuenow': value,\n          'aria-valuemin': 0,\n          'aria-valuemax': 100,\n        })}\n        style={{\n          ...(height ? { height: `${height}px` } : {}),\n          ...(stacked ? { width: `${value}%` } : {}),\n        }}\n        ref={ref}\n      >\n        {React.Children.toArray(children).some(\n          // @ts-expect-error displayName is set in the CProgressBar component\n          (child) => child.type && child.type.displayName === 'CProgressBar',\n        ) ? (\n          React.Children.map(children, (child) => {\n            // @ts-expect-error displayName is set in the CProgressBar component\n            if (React.isValidElement(child) && child.type.displayName === 'CProgressBar') {\n              return React.cloneElement(child, {\n                ...(value && { value: value }),\n                ...rest,\n              })\n            }\n\n            return\n          })\n        ) : (\n          <CProgressBar\n            {...(progressBarClassName && { className: progressBarClassName })}\n            value={value}\n            {...rest}\n          >\n            {children}\n          </CProgressBar>\n        )}\n      </div>\n    )\n  },\n)\n\nCProgress.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  height: PropTypes.number,\n  progressBarClassName: PropTypes.string,\n  thin: PropTypes.bool,\n  value: PropTypes.number,\n  white: PropTypes.bool,\n}\n\nCProgress.displayName = 'CProgress'\n"],"mappings":";;;;;;IAsCaA,SAAS,GAAGC,UAAU,CACjC,UAACC,EAAkF,EAAEC,GAAG;EAArF,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IAAEC,SAAS,GAAAH,EAAA,CAAAG,SAAA;IAAEC,MAAM,GAAAJ,EAAA,CAAAI,MAAA;IAAEC,oBAAoB,GAAAL,EAAA,CAAAK,oBAAA;IAAEC,IAAI,GAAAN,EAAA,CAAAM,IAAA;IAAEC,KAAK,GAAAP,EAAA,CAAAO,KAAA;IAAEC,KAAK,GAAAR,EAAA,CAAAQ,KAAA;IAAKC,IAAI,GAAhFC,MAAA,CAAAV,EAAA,uFAAkF,CAAF;EACvE,IAAAW,OAAO,GAAKC,UAAU,CAACC,uBAAuB,CAAC,CAAAF,OAAxC;EAEf,OACEG,KACE,CAAAC,aAAA,QAAAC,QAAA;IAAAb,SAAS,EAAEc,UAAU,CACnB,UAAU,EACV;MACE,eAAe,EAAEX,IAAI;MACrB,gBAAgB,EAAEE;IACnB,GACDL,SAAS;EACV,GACII,KAAK,KAAKW,SAAS,IAAI;IAC1BC,IAAI,EAAE,aAAa;IACnB,eAAe,EAAEZ,KAAK;IACtB,eAAe,EAAE,CAAC;IAClB,eAAe,EAAE;GAClB,EAAC;IACFa,KAAK,EAAAJ,QAAA,CAAAA,QAAA,KACCZ,MAAM,GAAG;MAAEA,MAAM,EAAE,GAAAiB,MAAA,CAAGjB,MAAM,EAAI;IAAA,CAAE,GAAG,EAAE,CACxC,EAACO,OAAO,GAAG;MAAEW,KAAK,EAAE,EAAG,CAAAD,MAAA,CAAAd,KAAK,EAAG;IAAA,CAAE,GAAG,EAAE,CAE3C;IAAAN,GAAG,EAAEA;EAAG,IAEPa,KAAK,CAACS,QAAQ,CAACC,OAAO,CAACtB,QAAQ,CAAC,CAACuB,IAAI;;EAEpC,UAACC,KAAK;IAAK,OAAAA,KAAK,CAACC,IAAI,IAAID,KAAK,CAACC,IAAI,CAACC,WAAW,KAAK,cAAc;EAAA,EACnE,GACCd,KAAK,CAACS,QAAQ,CAACM,GAAG,CAAC3B,QAAQ,EAAE,UAACwB,KAAK;;IAEjC,IAAIZ,KAAK,CAACgB,cAAc,CAACJ,KAAK,CAAC,IAAIA,KAAK,CAACC,IAAI,CAACC,WAAW,KAAK,cAAc,EAAE;MAC5E,OAAOd,KAAK,CAACiB,YAAY,CAACL,KAAK,EAAAV,QAAA,CAAAA,QAAA,KACzBT,KAAK,IAAI;QAAEA,KAAK,EAAEA;MAAK,CAAE,CAC1B,EAAAE,IAAI,EACP;;IAGJ;EACF,CAAC,CAAC,GAEFK,KAAC,CAAAC,aAAA,CAAAiB,YAAY,EACPhB,QAAA,KAACX,oBAAoB,IAAI;IAAEF,SAAS,EAAEE;EAAoB,CAAE,EAAC;IACjEE,KAAK,EAAEA;EAAK,GACRE,IAAI,GAEPP,QAAQ,CAEZ,CACG;AAEV,CAAC;AAGHJ,SAAS,CAACmC,SAAS,GAAG;EACpB/B,QAAQ,EAAEgC,SAAS,CAACC,IAAI;EACxBhC,SAAS,EAAE+B,SAAS,CAACE,MAAM;EAC3BhC,MAAM,EAAE8B,SAAS,CAACG,MAAM;EACxBhC,oBAAoB,EAAE6B,SAAS,CAACE,MAAM;EACtC9B,IAAI,EAAE4B,SAAS,CAACI,IAAI;EACpB/B,KAAK,EAAE2B,SAAS,CAACG,MAAM;EACvB7B,KAAK,EAAE0B,SAAS,CAACI;CAClB;AAEDxC,SAAS,CAAC8B,WAAW,GAAG,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}