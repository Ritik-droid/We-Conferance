{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../node_modules/classnames/index.js';\nimport { CCard } from '../card/CCard.js';\nimport { CCardBody } from '../card/CCardBody.js';\nimport '../card/CCardFooter.js';\nimport '../card/CCardGroup.js';\nimport '../card/CCardHeader.js';\nimport '../card/CCardImage.js';\nimport '../card/CCardImageOverlay.js';\nimport '../card/CCardLink.js';\nimport '../card/CCardSubtitle.js';\nimport '../card/CCardText.js';\nimport '../card/CCardTitle.js';\nimport { colorPropType } from '../../props.js';\nvar CWidgetStatsA = forwardRef(function (_a, ref) {\n  var _b;\n  var action = _a.action,\n    chart = _a.chart,\n    className = _a.className,\n    color = _a.color,\n    title = _a.title,\n    value = _a.value,\n    rest = __rest(_a, [\"action\", \"chart\", \"className\", \"color\", \"title\", \"value\"]);\n  return React.createElement(CCard, __assign({\n    className: classNames((_b = {}, _b[\"bg-\".concat(color)] = color, _b['text-white'] = color, _b), className)\n  }, rest, {\n    ref: ref\n  }), React.createElement(CCardBody, {\n    className: \"pb-0 d-flex justify-content-between align-items-start\"\n  }, React.createElement(\"div\", null, value && React.createElement(\"div\", {\n    className: \"fs-4 fw-semibold\"\n  }, value), title && React.createElement(\"div\", null, title)), action), chart);\n});\nCWidgetStatsA.propTypes = {\n  action: PropTypes.node,\n  chart: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  className: PropTypes.string,\n  color: colorPropType,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.number])\n};\nCWidgetStatsA.displayName = 'CWidgetStatsA';\nexport { CWidgetStatsA };","map":{"version":3,"names":["CWidgetStatsA","forwardRef","_a","ref","action","chart","className","color","title","value","rest","__rest","React","createElement","CCard","__assign","classNames","_b","concat","CCardBody","propTypes","PropTypes","node","oneOfType","string","colorPropType","number","displayName"],"sources":["C:\\Users\\ritik\\OneDrive\\Desktop\\Video-Call-App\\client\\node_modules\\@coreui\\react\\src\\components\\widgets\\CWidgetStatsA.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCard, CCardBody } from '../card'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CWidgetStatsAProps extends Omit<HTMLAttributes<HTMLDivElement>, 'title'> {\n  /**\n   * Action node for your component.\n   */\n  action?: ReactNode\n  /**\n   * Chart node for your component.\n   */\n  chart?: string | ReactNode\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUIâ€™s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Title node for your component.\n   */\n  title?: string | ReactNode\n  /**\n   * Value node for your component.\n   */\n  value?: string | number | ReactNode\n}\n\nexport const CWidgetStatsA = forwardRef<HTMLDivElement, CWidgetStatsAProps>(\n  ({ action, chart, className, color, title, value, ...rest }, ref) => {\n    return (\n      <CCard\n        className={classNames({ [`bg-${color}`]: color, 'text-white': color }, className)}\n        {...rest}\n        ref={ref}\n      >\n        <CCardBody className=\"pb-0 d-flex justify-content-between align-items-start\">\n          <div>\n            {value && <div className=\"fs-4 fw-semibold\">{value}</div>}\n            {title && <div>{title}</div>}\n          </div>\n          {action}\n        </CCardBody>\n        {chart}\n      </CCard>\n    )\n  },\n)\n\nCWidgetStatsA.propTypes = {\n  action: PropTypes.node,\n  chart: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  className: PropTypes.string,\n  color: colorPropType,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.number]),\n}\n\nCWidgetStatsA.displayName = 'CWidgetStatsA'\n"],"mappings":";;;;;;;;;;;;;;;;IAsCaA,aAAa,GAAGC,UAAU,CACrC,UAACC,EAA0D,EAAEC,GAAG;;EAA7D,IAAAC,MAAM,GAAAF,EAAA,CAAAE,MAAA;IAAEC,KAAK,GAAAH,EAAA,CAAAG,KAAA;IAAEC,SAAS,GAAAJ,EAAA,CAAAI,SAAA;IAAEC,KAAK,GAAAL,EAAA,CAAAK,KAAA;IAAEC,KAAK,GAAAN,EAAA,CAAAM,KAAA;IAAEC,KAAK,GAAAP,EAAA,CAAAO,KAAA;IAAKC,IAAI,GAAxDC,MAAA,CAAAT,EAAA,6DAA0D,CAAF;EACvD,OACEU,KAAC,CAAAC,aAAA,CAAAC,KAAK,EACJC,QAAA;IAAAT,SAAS,EAAEU,UAAU,EAAGC,EAAA,OAAAA,EAAA,CAAC,KAAM,CAAAC,MAAA,CAAAX,KAAK,CAAE,IAAGA,KAAK,EAAEU,EAAA,cAAY,GAAEV,KAAK,EAAIU,EAAA,GAAAX,SAAS;EAAC,GAC7EI,IAAI;IACRP,GAAG,EAAEA;EAAG,IAERS,KAAA,CAAAC,aAAA,CAACM,SAAS;IAACb,SAAS,EAAC;EAAuD,GAC1EM,KAAA,CAAAC,aAAA,cACGJ,KAAK,IAAIG,KAAK,CAAAC,aAAA;IAAAP,SAAS,EAAC;EAAkB,GAAEG,KAAK,CAAO,EACxDD,KAAK,IAAII,KAAA,CAAAC,aAAA,cAAML,KAAK,CAAO,CACxB,EACLJ,MAAM,CACG,EACXC,KAAK,CACA;AAEZ,CAAC;AAGHL,aAAa,CAACoB,SAAS,GAAG;EACxBhB,MAAM,EAAEiB,SAAS,CAACC,IAAI;EACtBjB,KAAK,EAAEgB,SAAS,CAACE,SAAS,CAAC,CAACF,SAAS,CAACG,MAAM,EAAEH,SAAS,CAACC,IAAI,CAAC,CAAC;EAC9DhB,SAAS,EAAEe,SAAS,CAACG,MAAM;EAC3BjB,KAAK,EAAEkB,aAAa;EACpBjB,KAAK,EAAEa,SAAS,CAACE,SAAS,CAAC,CAACF,SAAS,CAACG,MAAM,EAAEH,SAAS,CAACC,IAAI,CAAC,CAAC;EAC9Db,KAAK,EAAEY,SAAS,CAACE,SAAS,CAAC,CAACF,SAAS,CAACG,MAAM,EAAEH,SAAS,CAACC,IAAI,EAAED,SAAS,CAACK,MAAM,CAAC;CAChF;AAED1B,aAAa,CAAC2B,WAAW,GAAG,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}