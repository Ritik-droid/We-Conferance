{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { createContext, forwardRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../node_modules/classnames/index.js';\nvar CNavContext = createContext({});\nvar recursiveClone = function (children, id, updateId) {\n  return React.Children.map(children, function (child, index) {\n    if (!React.isValidElement(child) ||\n    // @ts-expect-error the `children` exist in each component. TODO: resolve\n    child.type.displayName !== 'CNavGroup' &&\n    // @ts-expect-error the `children` exist in each component. TODO: resolve\n    child.type.displayName !== 'CNavLink' &&\n    // @ts-expect-error the `children` exist in each component. TODO: resolve\n    child.type.displayName !== 'CNavItem') {\n      return child;\n    }\n    var _id = id ? updateId ? \"\".concat(id, \".\").concat(index) : \"\".concat(id) : \"\".concat(index);\n    if (child.props && child.props.children) {\n      return React.cloneElement(child, {\n        idx: _id,\n        children: recursiveClone(child.props.children, _id,\n        // @ts-expect-error the `displayName` exist in each component. TODO: resolve\n        child.type.displayName === 'CNavItem' ? false : true)\n      });\n    }\n    return React.cloneElement(child, {\n      idx: _id\n    });\n  });\n};\nvar CSidebarNav = forwardRef(function (_a, ref) {\n  var children = _a.children,\n    _b = _a.as,\n    Component = _b === void 0 ? 'ul' : _b,\n    className = _a.className,\n    rest = __rest(_a, [\"children\", \"as\", \"className\"]);\n  var _c = useState(''),\n    visibleGroup = _c[0],\n    setVisibleGroup = _c[1];\n  var CNavContextValues = {\n    visibleGroup: visibleGroup,\n    setVisibleGroup: setVisibleGroup\n  };\n  return React.createElement(CNavContext.Provider, {\n    value: CNavContextValues\n  }, React.createElement(Component, __assign({\n    className: classNames('sidebar-nav', className),\n    ref: ref\n  }, rest), recursiveClone(children)));\n});\nCSidebarNav.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nCSidebarNav.displayName = 'CSidebarNav';\nexport { CNavContext, CSidebarNav };","map":{"version":3,"names":["CNavContext","createContext","recursiveClone","children","id","updateId","React","Children","map","child","index","isValidElement","type","displayName","_id","concat","props","cloneElement","idx","CSidebarNav","forwardRef","_a","ref","_b","as","Component","className","rest","__rest","_c","useState","visibleGroup","setVisibleGroup","CNavContextValues","createElement","Provider","value","__assign","classNames","propTypes","PropTypes","elementType","node","string"],"sources":["C:\\Users\\ritik\\OneDrive\\Desktop\\Video-Call-App\\client\\node_modules\\@coreui\\react\\src\\components\\sidebar\\CSidebarNav.tsx"],"sourcesContent":["import React, {\n  createContext,\n  ElementType,\n  forwardRef,\n  HTMLAttributes,\n  ReactElement,\n  ReactNode,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CSidebarNavProps extends HTMLAttributes<HTMLUListElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   *\n   * @since 5.0.0\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\ninterface ContextProps {\n  visibleGroup: string\n  setVisibleGroup: React.Dispatch<React.SetStateAction<string | undefined>>\n}\n\nexport const CNavContext = createContext({} as ContextProps)\n\nconst recursiveClone = (children: ReactNode, id?: string, updateId?: boolean): ReactNode => {\n  return React.Children.map(children, (child: ReactNode, index: number) => {\n    if (\n      !React.isValidElement(child) ||\n      // @ts-expect-error the `children` exist in each component. TODO: resolve\n      (child.type.displayName !== 'CNavGroup' &&\n        // @ts-expect-error the `children` exist in each component. TODO: resolve\n        child.type.displayName !== 'CNavLink' &&\n        // @ts-expect-error the `children` exist in each component. TODO: resolve\n        child.type.displayName !== 'CNavItem')\n    ) {\n      return child\n    }\n\n    const _id = id ? (updateId ? `${id}.${index}` : `${id}`) : `${index}`\n\n    if (child.props && child.props.children) {\n      return React.cloneElement(child as ReactElement<any>, {\n        idx: _id,\n        children: recursiveClone(\n          child.props.children,\n          _id,\n          // @ts-expect-error the `displayName` exist in each component. TODO: resolve\n          child.type.displayName === 'CNavItem' ? false : true,\n        ),\n      })\n    }\n\n    return React.cloneElement(child as ReactElement<any>, {\n      idx: _id,\n    })\n  })\n}\n\nexport const CSidebarNav: PolymorphicRefForwardingComponent<'ul', CSidebarNavProps> = forwardRef<\n  HTMLUListElement,\n  CSidebarNavProps\n>(({ children, as: Component = 'ul', className, ...rest }, ref) => {\n  const [visibleGroup, setVisibleGroup] = useState('')\n  const CNavContextValues = {\n    visibleGroup,\n    setVisibleGroup,\n  }\n\n  return (\n    <CNavContext.Provider value={CNavContextValues}>\n      <Component className={classNames('sidebar-nav', className)} ref={ref} {...rest}>\n        {recursiveClone(children)}\n      </Component>\n    </CNavContext.Provider>\n  )\n})\n\nCSidebarNav.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCSidebarNav.displayName = 'CSidebarNav'\n"],"mappings":";;;;IAgCaA,WAAW,GAAGC,aAAa,CAAC,EAAkB;AAE3D,IAAMC,cAAc,GAAG,SAAAA,CAACC,QAAmB,EAAEC,EAAW,EAAEC,QAAkB;EAC1E,OAAOC,KAAK,CAACC,QAAQ,CAACC,GAAG,CAACL,QAAQ,EAAE,UAACM,KAAgB,EAAEC,KAAa;IAClE,IACE,CAACJ,KAAK,CAACK,cAAc,CAACF,KAAK,CAAC;;IAE3BA,KAAK,CAACG,IAAI,CAACC,WAAW,KAAK,WAAW;;IAErCJ,KAAK,CAACG,IAAI,CAACC,WAAW,KAAK,UAAU;;IAErCJ,KAAK,CAACG,IAAI,CAACC,WAAW,KAAK,UAAW,EACxC;MACA,OAAOJ,KAAK;;IAGd,IAAMK,GAAG,GAAGV,EAAE,GAAIC,QAAQ,GAAG,GAAAU,MAAA,CAAGX,EAAE,OAAAW,MAAA,CAAIL,KAAK,CAAE,GAAG,GAAAK,MAAA,CAAGX,EAAE,CAAE,GAAI,EAAG,CAAAW,MAAA,CAAAL,KAAK,CAAE;IAErE,IAAID,KAAK,CAACO,KAAK,IAAIP,KAAK,CAACO,KAAK,CAACb,QAAQ,EAAE;MACvC,OAAOG,KAAK,CAACW,YAAY,CAACR,KAA0B,EAAE;QACpDS,GAAG,EAAEJ,GAAG;QACRX,QAAQ,EAAED,cAAc,CACtBO,KAAK,CAACO,KAAK,CAACb,QAAQ,EACpBW,GAAG;;QAEHL,KAAK,CAACG,IAAI,CAACC,WAAW,KAAK,UAAU,GAAG,KAAK,GAAG,IAAI;MAEvD,EAAC;;IAGJ,OAAOP,KAAK,CAACW,YAAY,CAACR,KAA0B,EAAE;MACpDS,GAAG,EAAEJ;IACN,EAAC;EACJ,CAAC,CAAC;AACJ,CAAC;IAEYK,WAAW,GAA8DC,UAAU,CAG9F,UAACC,EAAsD,EAAEC,GAAG;EAAzD,IAAAnB,QAAQ,GAAAkB,EAAA,CAAAlB,QAAA;IAAEoB,EAAoB,GAAAF,EAAA,CAAAG,EAAA;IAAhBC,SAAS,GAAGF,EAAA,kBAAI,GAAAA,EAAA;IAAEG,SAAS,GAAAL,EAAA,CAAAK,SAAA;IAAKC,IAAI,GAAAC,MAAA,CAAAP,EAAA,EAApD,+BAAsD,CAAF;EAC/C,IAAAQ,EAAA,GAAkCC,QAAQ,CAAC,EAAE,CAAC;IAA7CC,YAAY,GAAAF,EAAA;IAAEG,eAAe,GAAAH,EAAA,GAAgB;EACpD,IAAMI,iBAAiB,GAAG;IACxBF,YAAY,EAAAA,YAAA;IACZC,eAAe,EAAAA;GAChB;EAED,OACE1B,KAAA,CAAA4B,aAAA,CAAClC,WAAW,CAACmC,QAAQ,EAAC;IAAAC,KAAK,EAAEH;EAAiB,GAC5C3B,KAAC,CAAA4B,aAAA,CAAAT,SAAS,EAACY,QAAA;IAAAX,SAAS,EAAEY,UAAU,CAAC,aAAa,EAAEZ,SAAS,CAAC;IAAEJ,GAAG,EAAEA;EAAG,GAAMK,IAAI,GAC3EzB,cAAc,CAACC,QAAQ,CAAC,CACf,CACS;AAE3B,CAAC;AAEDgB,WAAW,CAACoB,SAAS,GAAG;EACtBf,EAAE,EAAEgB,SAAS,CAACC,WAAW;EACzBtC,QAAQ,EAAEqC,SAAS,CAACE,IAAI;EACxBhB,SAAS,EAAEc,SAAS,CAACG;CACtB;AAEDxB,WAAW,CAACN,WAAW,GAAG,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}