{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../node_modules/classnames/index.js';\nimport { CFormControlWrapper } from './CFormControlWrapper.js';\nvar CFormInput = forwardRef(function (_a, ref) {\n  var _b;\n  var children = _a.children,\n    className = _a.className,\n    _c = _a.delay,\n    delay = _c === void 0 ? false : _c,\n    feedback = _a.feedback,\n    feedbackInvalid = _a.feedbackInvalid,\n    feedbackValid = _a.feedbackValid,\n    floatingClassName = _a.floatingClassName,\n    floatingLabel = _a.floatingLabel,\n    id = _a.id,\n    invalid = _a.invalid,\n    label = _a.label,\n    onChange = _a.onChange,\n    plainText = _a.plainText,\n    size = _a.size,\n    text = _a.text,\n    tooltipFeedback = _a.tooltipFeedback,\n    _d = _a.type,\n    type = _d === void 0 ? 'text' : _d,\n    valid = _a.valid,\n    rest = __rest(_a, [\"children\", \"className\", \"delay\", \"feedback\", \"feedbackInvalid\", \"feedbackValid\", \"floatingClassName\", \"floatingLabel\", \"id\", \"invalid\", \"label\", \"onChange\", \"plainText\", \"size\", \"text\", \"tooltipFeedback\", \"type\", \"valid\"]);\n  var _e = useState(),\n    value = _e[0],\n    setValue = _e[1];\n  useEffect(function () {\n    var timeOutId = setTimeout(function () {\n      return value && onChange && onChange(value);\n    }, typeof delay === 'number' ? delay : 500);\n    return function () {\n      return clearTimeout(timeOutId);\n    };\n  }, [value]);\n  return React.createElement(CFormControlWrapper, {\n    describedby: rest['aria-describedby'],\n    feedback: feedback,\n    feedbackInvalid: feedbackInvalid,\n    feedbackValid: feedbackValid,\n    floatingClassName: floatingClassName,\n    floatingLabel: floatingLabel,\n    id: id,\n    invalid: invalid,\n    label: label,\n    text: text,\n    tooltipFeedback: tooltipFeedback,\n    valid: valid\n  }, React.createElement(\"input\", __assign({\n    className: classNames(plainText ? 'form-control-plaintext' : 'form-control', (_b = {}, _b[\"form-control-\".concat(size)] = size, _b['form-control-color'] = type === 'color', _b['is-invalid'] = invalid, _b['is-valid'] = valid, _b), className),\n    id: id,\n    type: type,\n    onChange: function (event) {\n      return delay ? setValue(event) : onChange && onChange(event);\n    }\n  }, rest, {\n    ref: ref\n  }), children));\n});\nCFormInput.propTypes = __assign({\n  className: PropTypes.string,\n  id: PropTypes.string,\n  delay: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  plainText: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  type: PropTypes.oneOfType([PropTypes.oneOf(['color', 'file', 'text']), PropTypes.string])\n}, CFormControlWrapper.propTypes);\nCFormInput.displayName = 'CFormInput';\nexport { CFormInput };","map":{"version":3,"names":["CFormInput","forwardRef","_a","ref","children","className","_c","delay","feedback","feedbackInvalid","feedbackValid","floatingClassName","floatingLabel","id","invalid","label","onChange","plainText","size","text","tooltipFeedback","_d","type","valid","rest","__rest","_e","useState","value","setValue","useEffect","timeOutId","setTimeout","clearTimeout","React","createElement","CFormControlWrapper","describedby","__assign","classNames","_b","concat","event","propTypes","PropTypes","string","oneOfType","bool","number","oneOf","displayName"],"sources":["/root/Desktop/We-Conferance/client/node_modules/@coreui/react/src/components/form/CFormInput.tsx"],"sourcesContent":["import React, {\n  ChangeEventHandler,\n  forwardRef,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormInputProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Delay onChange event while typing. If set to true onChange event will be delayed 500ms, you can also provide the number of milliseconds you want to delay the onChange event.\n   */\n  delay?: boolean | number\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'color' | 'file' | 'text' | string\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormInput = forwardRef<HTMLInputElement, CFormInputProps>(\n  (\n    {\n      children,\n      className,\n      delay = false,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      onChange,\n      plainText,\n      size,\n      text,\n      tooltipFeedback,\n      type = 'text',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [value, setValue] = useState<React.ChangeEvent<HTMLInputElement>>()\n\n    useEffect(() => {\n      const timeOutId = setTimeout(\n        () => value && onChange && onChange(value),\n        typeof delay === 'number' ? delay : 500,\n      )\n\n      return () => clearTimeout(timeOutId)\n    }, [value])\n\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <input\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              [`form-control-${size}`]: size,\n              'form-control-color': type === 'color',\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          type={type}\n          onChange={(event) => (delay ? setValue(event) : onChange && onChange(event))}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </input>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  delay: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  plainText: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  type: PropTypes.oneOfType([PropTypes.oneOf(['color', 'file', 'text']), PropTypes.string]),\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormInput.displayName = 'CFormInput'\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}