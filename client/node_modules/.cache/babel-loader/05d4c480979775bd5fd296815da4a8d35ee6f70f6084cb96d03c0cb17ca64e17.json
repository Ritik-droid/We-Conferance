{"ast":null,"code":"import { useMemo } from 'react';\n\n// code borrowed from https://github.com/reach/reach-ui\n// problem described https://github.com/facebook/react/issues/13029\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction useForkedRef() {\n  var refs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    refs[_i] = arguments[_i];\n  }\n  return useMemo(function () {\n    if (refs.every(function (ref) {\n      return ref == null;\n    })) {\n      return null;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (node) {\n      refs.forEach(function (ref) {\n        assignRef(ref, node);\n      });\n    };\n  }, refs);\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction assignRef(ref,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvalue) {\n  if (ref == null) return;\n  if (isFunction(ref)) {\n    ref(value);\n  } else {\n    try {\n      ref.current = value;\n    } catch (_a) {\n      throw new Error(\"Cannot assign value \\\"\".concat(value, \"\\\" to ref \\\"\").concat(ref, \"\\\"\"));\n    }\n  }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/ban-types\nfunction isFunction(value) {\n  return !!(value && {}.toString.call(value) == '[object Function]');\n}\nexport { assignRef, isFunction, useForkedRef };","map":{"version":3,"names":["useForkedRef","refs","_i","arguments","length","useMemo","every","ref","node","forEach","assignRef","value","isFunction","current","_a","Error","concat","toString","call"],"sources":["/root/Desktop/We-Conferance/client/node_modules/@coreui/react/src/hooks/useForkedRef.ts"],"sourcesContent":["// code borrowed from https://github.com/reach/reach-ui\n// problem described https://github.com/facebook/react/issues/13029\n\nimport { useMemo } from 'react'\n\nexport type AssignableRef<ValueType> =\n  | {\n      bivarianceHack(instance: ValueType | null): void\n    }['bivarianceHack']\n  | React.MutableRefObject<ValueType | null>\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useForkedRef<RefValueType = any>(\n  ...refs: (AssignableRef<RefValueType> | null | undefined)[]\n) {\n  return useMemo(() => {\n    if (refs.every((ref) => ref == null)) {\n      return null\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (node: any) => {\n      refs.forEach((ref) => {\n        assignRef(ref, node)\n      })\n    }\n  }, refs)\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function assignRef<RefValueType = any>(\n  ref: AssignableRef<RefValueType> | null | undefined,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any,\n) {\n  if (ref == null) return\n  if (isFunction(ref)) {\n    ref(value)\n  } else {\n    try {\n      ref.current = value\n    } catch {\n      throw new Error(`Cannot assign value \"${value}\" to ref \"${ref}\"`)\n    }\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/ban-types\nexport function isFunction(value: any): value is Function {\n  return !!(value && {}.toString.call(value) == '[object Function]')\n}\n"],"mappings":";;AAAA;AACA;AAUA;SACgBA,YAAYA,CAAA;EAC1B,IAA2DC,IAAA;OAA3D,IAA2DC,EAAA,MAA3DA,EAA2D,GAAAC,SAAA,CAAAC,MAAA,EAA3DF,EAA2D;IAA3DD,IAA2D,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;EAE3D,OAAOG,OAAO,CAAC;IACb,IAAIJ,IAAI,CAACK,KAAK,CAAC,UAACC,GAAG;MAAK,OAAAA,GAAG,IAAI,IAAI;IAAA,EAAC,EAAE;MACpC,OAAO,IAAI;;;IAGb,OAAO,UAACC,IAAS;MACfP,IAAI,CAACQ,OAAO,CAAC,UAACF,GAAG;QACfG,SAAS,CAACH,GAAG,EAAEC,IAAI,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC;GACF,EAAEP,IAAI,CAAC;AACV;AAEA;AACM,SAAUS,SAASA,CACvBH,GAAmD;AACnD;AACAI,KAAU;EAEV,IAAIJ,GAAG,IAAI,IAAI,EAAE;EACjB,IAAIK,UAAU,CAACL,GAAG,CAAC,EAAE;IACnBA,GAAG,CAACI,KAAK,CAAC;GACX,MAAM;IACL,IAAI;MACFJ,GAAG,CAACM,OAAO,GAAGF,KAAK;KACpB,CAAC,OAAAG,EAAA,EAAM;MACN,MAAM,IAAIC,KAAK,CAAC,yBAAAC,MAAA,CAAwBL,KAAK,EAAa,gBAAAK,MAAA,CAAAT,GAAG,EAAG,MAAC;;;AAGvE;AAEA;AACM,SAAUK,UAAUA,CAACD,KAAU;EACnC,OAAO,CAAC,EAAEA,KAAK,IAAI,EAAE,CAACM,QAAQ,CAACC,IAAI,CAACP,KAAK,CAAC,IAAI,mBAAmB,CAAC;AACpE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}