{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../node_modules/classnames/index.js';\nvar CNavbarBrand = forwardRef(function (_a, ref) {\n  var children = _a.children,\n    as = _a.as,\n    className = _a.className,\n    rest = __rest(_a, [\"children\", \"as\", \"className\"]);\n  var Component = as !== null && as !== void 0 ? as : rest.href ? 'a' : 'span';\n  return React.createElement(Component, __assign({\n    className: classNames('navbar-brand', className)\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCNavbarBrand.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nCNavbarBrand.displayName = 'CNavbarBrand';\nexport { CNavbarBrand };","map":{"version":3,"names":["CNavbarBrand","forwardRef","_a","ref","children","as","className","rest","__rest","Component","href","React","createElement","__assign","classNames","propTypes","PropTypes","elementType","node","string","displayName"],"sources":["C:\\Users\\ritik\\OneDrive\\Desktop\\We-Conferance\\client\\node_modules\\@coreui\\react\\src\\components\\navbar\\CNavbarBrand.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CNavbarBrandProps extends HTMLAttributes<HTMLAnchorElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   *\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * The href attribute specifies the URL of the page the link goes to.\n   */\n  href?: string\n}\n\nexport const CNavbarBrand: PolymorphicRefForwardingComponent<'a', CNavbarBrandProps> = forwardRef<\n  HTMLAnchorElement | HTMLSpanElement,\n  CNavbarBrandProps\n>(({ children, as, className, ...rest }, ref) => {\n  const Component = as ?? (rest.href ? 'a' : 'span')\n\n  return (\n    <Component className={classNames('navbar-brand', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCNavbarBrand.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCNavbarBrand.displayName = 'CNavbarBrand'\n"],"mappings":";;;;IAsBaA,YAAY,GAA8DC,UAAU,CAG/F,UAACC,EAAoC,EAAEC,GAAG;EAAvC,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IAAEC,EAAE,GAAAH,EAAA,CAAAG,EAAA;IAAEC,SAAS,GAAAJ,EAAA,CAAAI,SAAA;IAAKC,IAAI,GAAlCC,MAAA,CAAAN,EAAA,iCAAoC,CAAF;EACnC,IAAMO,SAAS,GAAGJ,EAAE,aAAFA,EAAE,KAAF,SAAAA,EAAE,GAAKE,IAAI,CAACG,IAAI,GAAG,GAAG,GAAG,MAAO;EAElD,OACEC,KAAA,CAAAC,aAAA,CAACH,SAAS,EAAAI,QAAA;IAACP,SAAS,EAAEQ,UAAU,CAAC,cAAc,EAAER,SAAS;EAAC,CAAM,EAAAC,IAAI;IAAEJ,GAAG,EAAEA;EAAG,CAC5E,GAAAC,QAAQ,CACC;AAEhB,CAAC;AAEDJ,YAAY,CAACe,SAAS,GAAG;EACvBV,EAAE,EAAEW,SAAS,CAACC,WAAW;EACzBb,QAAQ,EAAEY,SAAS,CAACE,IAAI;EACxBZ,SAAS,EAAEU,SAAS,CAACG;CACtB;AAEDnB,YAAY,CAACoB,WAAW,GAAG,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}