{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nvar getContainer = function (container) {\n  if (container) {\n    return typeof container === 'function' ? container() : container;\n  }\n  return document.body;\n};\nvar CConditionalPortal = function (_a) {\n  var children = _a.children,\n    container = _a.container,\n    portal = _a.portal;\n  var _b = useState(null),\n    _container = _b[0],\n    setContainer = _b[1];\n  useEffect(function () {\n    portal && setContainer(getContainer(container) || document.body);\n  }, [container, portal]);\n  return typeof window !== 'undefined' && portal && _container ? createPortal(children, _container) : React.createElement(React.Fragment, null, children);\n};\nCConditionalPortal.propTypes = {\n  children: PropTypes.node,\n  container: PropTypes.any,\n  // HTMLElement\n  portal: PropTypes.bool.isRequired\n};\nCConditionalPortal.displayName = 'CConditionalPortal';\nexport { CConditionalPortal };","map":{"version":3,"names":["getContainer","container","document","body","CConditionalPortal","_a","children","portal","_b","useState","_container","setContainer","useEffect","window","createPortal","React","createElement","Fragment","propTypes","PropTypes","node","any","bool","isRequired","displayName"],"sources":["/root/Desktop/We-Conferance/client/node_modules/@coreui/react/src/components/conditional-portal/CConditionalPortal.tsx"],"sourcesContent":["import React, { FC, ReactNode, useEffect, useState } from 'react'\nimport { createPortal } from 'react-dom'\nimport PropTypes from 'prop-types'\n\nconst getContainer = (\n  container?: DocumentFragment | Element | (() => DocumentFragment | Element | null) | null,\n) => {\n  if (container) {\n    return typeof container === 'function' ? container() : container\n  }\n\n  return document.body\n}\n\nexport interface CConditionalPortalProps {\n  /**\n   * @ignore\n   */\n  children: ReactNode\n  /**\n   * An HTML element or function that returns a single element, with `document.body` as the default.\n   *\n   * @since 4.11.0\n   */\n  container?: DocumentFragment | Element | (() => DocumentFragment | Element | null) | null\n  /**\n   * Render some children into a different part of the DOM\n   */\n  portal: boolean\n}\n\nexport const CConditionalPortal: FC<CConditionalPortalProps> = ({\n  children,\n  container,\n  portal,\n}) => {\n  const [_container, setContainer] = useState<ReturnType<typeof getContainer>>(null)\n\n  useEffect(() => {\n    portal && setContainer(getContainer(container) || document.body)\n  }, [container, portal])\n\n  return typeof window !== 'undefined' && portal && _container ? (\n    createPortal(children, _container)\n  ) : (\n    <>{children}</>\n  )\n}\n\nCConditionalPortal.propTypes = {\n  children: PropTypes.node,\n  container: PropTypes.any, // HTMLElement\n  portal: PropTypes.bool.isRequired,\n}\n\nCConditionalPortal.displayName = 'CConditionalPortal'\n"],"mappings":";;;AAIA,IAAMA,YAAY,GAAG,SAAAA,CACnBC,SAAyF;EAEzF,IAAIA,SAAS,EAAE;IACb,OAAO,OAAOA,SAAS,KAAK,UAAU,GAAGA,SAAS,EAAE,GAAGA,SAAS;;EAGlE,OAAOC,QAAQ,CAACC,IAAI;AACtB,CAAC;AAmBM,IAAMC,kBAAkB,GAAgC,SAAAA,CAACC,EAI/D;EAHC,IAAAC,QAAQ,GAAAD,EAAA,CAAAC,QAAA;IACRL,SAAS,GAAAI,EAAA,CAAAJ,SAAA;IACTM,MAAM,GAAAF,EAAA,CAAAE,MAAA;EAEA,IAAAC,EAAA,GAA6BC,QAAQ,CAAkC,IAAI,CAAC;IAA3EC,UAAU,GAAAF,EAAA;IAAEG,YAAY,GAAAH,EAAA,GAAmD;EAElFI,SAAS,CAAC;IACRL,MAAM,IAAII,YAAY,CAACX,YAAY,CAACC,SAAS,CAAC,IAAIC,QAAQ,CAACC,IAAI,CAAC;EAClE,CAAC,EAAE,CAACF,SAAS,EAAEM,MAAM,CAAC,CAAC;EAEvB,OAAO,OAAOM,MAAM,KAAK,WAAW,IAAIN,MAAM,IAAIG,UAAU,GAC1DI,YAAY,CAACR,QAAQ,EAAEI,UAAU,CAAC,GAElCK,KAAG,CAAAC,aAAA,CAAAD,KAAA,CAAAE,QAAA,QAAAX,QAAQ,CACZ;AACH;AAEAF,kBAAkB,CAACc,SAAS,GAAG;EAC7BZ,QAAQ,EAAEa,SAAS,CAACC,IAAI;EACxBnB,SAAS,EAAEkB,SAAS,CAACE,GAAG;EAAA;EACxBd,MAAM,EAAEY,SAAS,CAACG,IAAI,CAACC;CACxB;AAEDnB,kBAAkB,CAACoB,WAAW,GAAG,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}