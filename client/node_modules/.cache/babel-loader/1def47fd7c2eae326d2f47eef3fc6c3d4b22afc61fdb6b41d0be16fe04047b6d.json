{"ast":null,"code":"import { useState, useEffect } from 'react';\nvar getStoredTheme = function (localStorageItemName) {\n  return typeof window !== 'undefined' && localStorage.getItem(localStorageItemName);\n};\nvar setStoredTheme = function (localStorageItemName, colorMode) {\n  return localStorage.setItem(localStorageItemName, colorMode);\n};\nvar getPreferredColorScheme = function (localStorageItemName) {\n  if (typeof window === 'undefined') {\n    return 'light';\n  }\n  var storedTheme = getStoredTheme(localStorageItemName);\n  if (storedTheme) {\n    return storedTheme;\n  }\n  return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n};\nvar setTheme = function (colorMode) {\n  document.documentElement.dataset.coreuiTheme = colorMode === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : colorMode;\n  var event = new Event('ColorSchemeChange');\n  document.documentElement.dispatchEvent(event);\n};\nvar useColorModes = function (localStorageItemName) {\n  if (localStorageItemName === void 0) {\n    localStorageItemName = 'coreui-react-color-scheme';\n  }\n  var _a = useState(getPreferredColorScheme(localStorageItemName)),\n    colorMode = _a[0],\n    setColorMode = _a[1];\n  useEffect(function () {\n    if (colorMode) {\n      setStoredTheme(localStorageItemName, colorMode);\n      setTheme(colorMode);\n    }\n  }, [colorMode]);\n  useEffect(function () {\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function () {\n      var storedTheme = getStoredTheme(localStorageItemName);\n      if (storedTheme !== 'light' && storedTheme !== 'dark' && colorMode) {\n        setTheme(colorMode);\n      }\n    });\n  });\n  return {\n    colorMode: colorMode,\n    isColorModeSet: function () {\n      return Boolean(getStoredTheme(localStorageItemName));\n    },\n    setColorMode: setColorMode\n  };\n};\nexport { useColorModes };","map":{"version":3,"names":["getStoredTheme","localStorageItemName","window","localStorage","getItem","setStoredTheme","colorMode","setItem","getPreferredColorScheme","storedTheme","matchMedia","matches","setTheme","document","documentElement","dataset","coreuiTheme","event","Event","dispatchEvent","useColorModes","_a","useState","setColorMode","useEffect","addEventListener","isColorModeSet","Boolean"],"sources":["/root/Desktop/We-Conferance/client/node_modules/@coreui/react/src/hooks/useColorModes.ts"],"sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from 'react'\n\ninterface UseColorModesOutput {\n  colorMode: string | undefined\n  isColorModeSet: () => boolean\n  setColorMode: Dispatch<SetStateAction<string>>\n}\n\nconst getStoredTheme = (localStorageItemName: string) =>\n  typeof window !== 'undefined' && localStorage.getItem(localStorageItemName)\n\nconst setStoredTheme = (localStorageItemName: string, colorMode: string) =>\n  localStorage.setItem(localStorageItemName, colorMode)\n\nconst getPreferredColorScheme = (localStorageItemName: string) => {\n  if (typeof window === 'undefined') {\n    return 'light'\n  }\n\n  const storedTheme = getStoredTheme(localStorageItemName)\n\n  if (storedTheme) {\n    return storedTheme\n  }\n\n  return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'\n}\n\nconst setTheme = (colorMode: string) => {\n  document.documentElement.dataset.coreuiTheme =\n    colorMode === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches\n      ? 'dark'\n      : colorMode\n\n  const event = new Event('ColorSchemeChange')\n  document.documentElement.dispatchEvent(event)\n}\n\nexport const useColorModes = (\n  localStorageItemName = 'coreui-react-color-scheme',\n): UseColorModesOutput => {\n  const [colorMode, setColorMode] = useState<string | undefined>(\n    getPreferredColorScheme(localStorageItemName),\n  )\n\n  useEffect(() => {\n    if (colorMode) {\n      setStoredTheme(localStorageItemName, colorMode)\n      setTheme(colorMode)\n    }\n  }, [colorMode])\n\n  useEffect(() => {\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {\n      const storedTheme = getStoredTheme(localStorageItemName)\n      if (storedTheme !== 'light' && storedTheme !== 'dark' && colorMode) {\n        setTheme(colorMode)\n      }\n    })\n  })\n\n  return {\n    colorMode,\n    isColorModeSet: () => Boolean(getStoredTheme(localStorageItemName)),\n    setColorMode,\n  }\n}\n"],"mappings":";AAQA,IAAMA,cAAc,GAAG,SAAAA,CAACC,oBAA4B;EAClD,cAAOC,MAAM,KAAK,WAAW,IAAIC,YAAY,CAACC,OAAO,CAACH,oBAAoB,CAAC;AAA3E,CAA2E;AAE7E,IAAMI,cAAc,GAAG,SAAAA,CAACJ,oBAA4B,EAAEK,SAAiB;EACrE,OAAAH,YAAY,CAACI,OAAO,CAACN,oBAAoB,EAAEK,SAAS,CAAC;AAArD,CAAqD;AAEvD,IAAME,uBAAuB,GAAG,SAAAA,CAACP,oBAA4B;EAC3D,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IACjC,OAAO,OAAO;;EAGhB,IAAMO,WAAW,GAAGT,cAAc,CAACC,oBAAoB,CAAC;EAExD,IAAIQ,WAAW,EAAE;IACf,OAAOA,WAAW;;EAGpB,OAAOP,MAAM,CAACQ,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,GAAG,MAAM,GAAG,OAAO;AACrF,CAAC;AAED,IAAMC,QAAQ,GAAG,SAAAA,CAACN,SAAiB;EACjCO,QAAQ,CAACC,eAAe,CAACC,OAAO,CAACC,WAAW,GAC1CV,SAAS,KAAK,MAAM,IAAIJ,MAAM,CAACQ,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,GAC7E,MAAM,GACNL,SAAS;EAEf,IAAMW,KAAK,GAAG,IAAIC,KAAK,CAAC,mBAAmB,CAAC;EAC5CL,QAAQ,CAACC,eAAe,CAACK,aAAa,CAACF,KAAK,CAAC;AAC/C,CAAC;AAEM,IAAMG,aAAa,GAAG,SAAAA,CAC3BnB,oBAAkD;EAAlD,IAAAA,oBAAA;IAAAA,oBAAkD;EAAA;EAE5C,IAAAoB,EAA4B,GAAAC,QAAQ,CACxCd,uBAAuB,CAACP,oBAAoB,CAAC,CAC9C;IAFMK,SAAS,GAAAe,EAAA;IAAEE,YAAY,GAAAF,EAAA,GAE7B;EAEDG,SAAS,CAAC;IACR,IAAIlB,SAAS,EAAE;MACbD,cAAc,CAACJ,oBAAoB,EAAEK,SAAS,CAAC;MAC/CM,QAAQ,CAACN,SAAS,CAAC;;EAEvB,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEfkB,SAAS,CAAC;IACRtB,MAAM,CAACQ,UAAU,CAAC,8BAA8B,CAAC,CAACe,gBAAgB,CAAC,QAAQ,EAAE;MAC3E,IAAMhB,WAAW,GAAGT,cAAc,CAACC,oBAAoB,CAAC;MACxD,IAAIQ,WAAW,KAAK,OAAO,IAAIA,WAAW,KAAK,MAAM,IAAIH,SAAS,EAAE;QAClEM,QAAQ,CAACN,SAAS,CAAC;;IAEvB,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAO;IACLA,SAAS,EAAAA,SAAA;IACToB,cAAc,EAAE,SAAAA,CAAA,EAAM;MAAA,OAAAC,OAAO,CAAC3B,cAAc,CAACC,oBAAoB,CAAC,CAAC;IAAA;IACnEsB,YAAY,EAAAA;GACb;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}