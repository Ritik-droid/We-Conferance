{"ast":null,"code":"import React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../node_modules/classnames/index.js';\nvar CListGroup = forwardRef(function (_a, ref) {\n  var _b;\n  var children = _a.children,\n    _c = _a.as,\n    Component = _c === void 0 ? 'ul' : _c,\n    className = _a.className,\n    flush = _a.flush,\n    layout = _a.layout;\n  return React.createElement(Component, {\n    className: classNames('list-group', (_b = {\n      'list-group-flush': flush\n    }, _b[\"list-group-\".concat(layout)] = layout, _b), className),\n    ref: ref\n  }, children);\n});\nCListGroup.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  flush: PropTypes.bool,\n  layout: PropTypes.oneOf(['horizontal', 'horizontal-sm', 'horizontal-md', 'horizontal-lg', 'horizontal-xl', 'horizontal-xxl'])\n};\nCListGroup.displayName = 'CListGroup';\nexport { CListGroup };","map":{"version":3,"names":["CListGroup","forwardRef","_a","ref","children","_c","as","Component","className","flush","layout","React","createElement","classNames","_b","concat","propTypes","PropTypes","elementType","node","string","bool","oneOf","displayName"],"sources":["C:\\Users\\ritik\\OneDrive\\Desktop\\We-Conferance\\client\\node_modules\\@coreui\\react\\src\\components\\list-group\\CListGroup.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CListGroupProps extends HTMLAttributes<HTMLDivElement | HTMLUListElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Remove some borders and rounded corners to render list group items edge-to-edge in a parent component (e.g., `<CCard>`).\n   */\n  flush?: boolean\n  /**\n   * Specify a layout type.\n   */\n  layout?:\n    | 'horizontal'\n    | 'horizontal-sm'\n    | 'horizontal-md'\n    | 'horizontal-lg'\n    | 'horizontal-xl'\n    | 'horizontal-xxl'\n}\n\nexport const CListGroup: PolymorphicRefForwardingComponent<'ul', CListGroupProps> = forwardRef<\n  HTMLDivElement | HTMLUListElement,\n  CListGroupProps\n>(({ children, as: Component = 'ul', className, flush, layout }, ref) => {\n  return (\n    <Component\n      className={classNames(\n        'list-group',\n        {\n          'list-group-flush': flush,\n          [`list-group-${layout}`]: layout,\n        },\n        className,\n      )}\n      ref={ref}\n    >\n      {children}\n    </Component>\n  )\n})\n\nCListGroup.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  flush: PropTypes.bool,\n  layout: PropTypes.oneOf([\n    'horizontal',\n    'horizontal-sm',\n    'horizontal-md',\n    'horizontal-lg',\n    'horizontal-xl',\n    'horizontal-xxl',\n  ]),\n}\n\nCListGroup.displayName = 'CListGroup'\n"],"mappings":";;;IA+BaA,UAAU,GAA6DC,UAAU,CAG5F,UAACC,EAA4D,EAAEC,GAAG;;EAA/D,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IAAEC,EAAA,GAAAH,EAAA,CAAAI,EAAoB;IAAhBC,SAAS,GAAAF,EAAA,cAAG,IAAI,GAAAA,EAAA;IAAEG,SAAS,GAAAN,EAAA,CAAAM,SAAA;IAAEC,KAAK,GAAAP,EAAA,CAAAO,KAAA;IAAEC,MAAM,GAAAR,EAAA,CAAAQ,MAAA;EAC3D,OACEC,KAAA,CAAAC,aAAA,CAACL,SAAS;IACRC,SAAS,EAAEK,UAAU,CACnB,YAAY,GAAAC,EAAA;MAEV,kBAAkB,EAAEL;OACpBK,EAAA,CAAC,aAAc,CAAAC,MAAA,CAAAL,MAAM,CAAE,IAAGA,MAAM,E,KAElCF,SAAS,CACV;IACDL,GAAG,EAAEA;EAAG,CAEP,EAAAC,QAAQ,CACC;AAEhB,CAAC;AAEDJ,UAAU,CAACgB,SAAS,GAAG;EACrBV,EAAE,EAAEW,SAAS,CAACC,WAAW;EACzBd,QAAQ,EAAEa,SAAS,CAACE,IAAI;EACxBX,SAAS,EAAES,SAAS,CAACG,MAAM;EAC3BX,KAAK,EAAEQ,SAAS,CAACI,IAAI;EACrBX,MAAM,EAAEO,SAAS,CAACK,KAAK,CAAC,CACtB,YAAY,EACZ,eAAe,EACf,eAAe,EACf,eAAe,EACf,eAAe,EACf,gBAAgB,CACjB;CACF;AAEDtB,UAAU,CAACuB,WAAW,GAAG,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}