{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../node_modules/classnames/index.js';\nimport { CFormControlValidation } from './CFormControlValidation.js';\nimport { CFormLabel } from './CFormLabel.js';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport '@popperjs/core';\nvar CFormCheck = forwardRef(function (_a, ref) {\n  var className = _a.className,\n    button = _a.button,\n    feedback = _a.feedback,\n    feedbackInvalid = _a.feedbackInvalid,\n    feedbackValid = _a.feedbackValid,\n    floatingLabel = _a.floatingLabel,\n    tooltipFeedback = _a.tooltipFeedback,\n    hitArea = _a.hitArea,\n    id = _a.id,\n    indeterminate = _a.indeterminate,\n    inline = _a.inline,\n    invalid = _a.invalid,\n    label = _a.label,\n    reverse = _a.reverse,\n    _b = _a.type,\n    type = _b === void 0 ? 'checkbox' : _b,\n    valid = _a.valid,\n    rest = __rest(_a, [\"className\", \"button\", \"feedback\", \"feedbackInvalid\", \"feedbackValid\", \"floatingLabel\", \"tooltipFeedback\", \"hitArea\", \"id\", \"indeterminate\", \"inline\", \"invalid\", \"label\", \"reverse\", \"type\", \"valid\"]);\n  var inputRef = useRef(null);\n  var forkedRef = useForkedRef(ref, inputRef);\n  useEffect(function () {\n    if (inputRef.current && indeterminate) {\n      inputRef.current.indeterminate = indeterminate;\n    }\n  }, [indeterminate, inputRef.current]);\n  var FormControl = function () {\n    return React.createElement(\"input\", __assign({\n      type: type,\n      className: classNames(button ? 'btn-check' : 'form-check-input', {\n        'is-invalid': invalid,\n        'is-valid': valid,\n        'me-2': hitArea\n      }),\n      id: id\n    }, rest, {\n      ref: forkedRef\n    }));\n  };\n  var FormValidation = function () {\n    return React.createElement(CFormControlValidation, {\n      describedby: rest['aria-describedby'],\n      feedback: feedback,\n      feedbackInvalid: feedbackInvalid,\n      feedbackValid: feedbackValid,\n      floatingLabel: floatingLabel,\n      invalid: invalid,\n      tooltipFeedback: tooltipFeedback,\n      valid: valid\n    });\n  };\n  var FormLabel = function () {\n    var _a;\n    return React.createElement(CFormLabel, __assign({\n      customClassName: classNames(button ? classNames('btn', button.variant ? \"btn-\".concat(button.variant, \"-\").concat(button.color) : \"btn-\".concat(button.color), (_a = {}, _a[\"btn-\".concat(button.size)] = button.size, _a), \"\".concat(button.shape)) : 'form-check-label')\n    }, id && {\n      htmlFor: id\n    }), label);\n  };\n  var FormCheck = function () {\n    if (button) {\n      return React.createElement(React.Fragment, null, React.createElement(FormControl, null), label && React.createElement(FormLabel, null), React.createElement(FormValidation, null));\n    }\n    if (label) {\n      return hitArea ? React.createElement(React.Fragment, null, React.createElement(FormControl, null), React.createElement(CFormLabel, __assign({\n        customClassName: classNames('form-check-label stretched-link', className)\n      }, id && {\n        htmlFor: id\n      }), label), React.createElement(FormValidation, null)) : React.createElement(\"div\", {\n        className: classNames('form-check', {\n          'form-check-inline': inline,\n          'form-check-reverse': reverse,\n          'is-invalid': invalid,\n          'is-valid': valid\n        }, className)\n      }, React.createElement(FormControl, null), React.createElement(FormLabel, null), React.createElement(FormValidation, null));\n    }\n    return React.createElement(FormControl, null);\n  };\n  return React.createElement(FormCheck, null);\n});\nCFormCheck.propTypes = __assign({\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio'])\n}, CFormControlValidation.propTypes);\nCFormCheck.displayName = 'CFormCheck';\nexport { CFormCheck };","map":{"version":3,"names":["CFormCheck","forwardRef","_a","ref","className","button","feedback","feedbackInvalid","feedbackValid","floatingLabel","tooltipFeedback","hitArea","id","indeterminate","inline","invalid","label","reverse","_b","type","valid","rest","__rest","inputRef","useRef","forkedRef","useForkedRef","useEffect","current","FormControl","React","createElement","__assign","classNames","FormValidation","CFormControlValidation","describedby","FormLabel","CFormLabel","customClassName","variant","concat","color","size","shape","htmlFor","FormCheck","Fragment","propTypes","PropTypes","object","string","oneOf","bool","oneOfType","node","displayName"],"sources":["/root/Desktop/We-Conferance/client/node_modules/@coreui/react/src/components/form/CFormCheck.tsx"],"sourcesContent":["import React, { forwardRef, InputHTMLAttributes, ReactNode, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormLabel } from './CFormLabel'\n\nimport { useForkedRef } from '../../hooks'\nimport type { Colors, Shapes } from '../../types'\n\nexport type ButtonObject = {\n  /**\n   * Sets the color context of the component to one of CoreUIâ€™s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport interface CFormCheckProps\n  extends CFormControlValidationProps,\n    InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Create button-like checkboxes and radio buttons.\n   */\n  button?: ButtonObject\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets hit area to the full area of the component.\n   */\n  hitArea?: 'full'\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Input Checkbox indeterminate Property.\n   */\n  indeterminate?: boolean\n  /**\n   * Group checkboxes or radios on the same horizontal row.\n   */\n  inline?: boolean\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put checkboxes or radios on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormCheck = forwardRef<HTMLInputElement, CFormCheckProps>(\n  (\n    {\n      className,\n      button,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingLabel,\n      tooltipFeedback,\n      hitArea,\n      id,\n      indeterminate,\n      inline,\n      invalid,\n      label,\n      reverse,\n      type = 'checkbox',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const forkedRef = useForkedRef(ref, inputRef)\n\n    useEffect(() => {\n      if (inputRef.current && indeterminate) {\n        inputRef.current.indeterminate = indeterminate\n      }\n    }, [indeterminate, inputRef.current])\n\n    const FormControl = () => (\n      <input\n        type={type}\n        className={classNames(button ? 'btn-check' : 'form-check-input', {\n          'is-invalid': invalid,\n          'is-valid': valid,\n          'me-2': hitArea,\n        })}\n        id={id}\n        {...rest}\n        ref={forkedRef}\n      />\n    )\n\n    const FormValidation = () => (\n      <CFormControlValidation\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingLabel={floatingLabel}\n        invalid={invalid}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      />\n    )\n\n    const FormLabel = () => (\n      <CFormLabel\n        customClassName={classNames(\n          button\n            ? classNames(\n                'btn',\n                button.variant ? `btn-${button.variant}-${button.color}` : `btn-${button.color}`,\n                {\n                  [`btn-${button.size}`]: button.size,\n                },\n                `${button.shape}`,\n              )\n            : 'form-check-label',\n        )}\n        {...(id && { htmlFor: id })}\n      >\n        {label}\n      </CFormLabel>\n    )\n\n    const FormCheck = () => {\n      if (button) {\n        return (\n          <>\n            <FormControl />\n            {label && <FormLabel />}\n            <FormValidation />\n          </>\n        )\n      }\n\n      if (label) {\n        return hitArea ? (\n          <>\n            <FormControl />\n            <CFormLabel\n              customClassName={classNames('form-check-label stretched-link', className)}\n              {...(id && { htmlFor: id })}\n            >\n              {label}\n            </CFormLabel>\n            <FormValidation />\n          </>\n        ) : (\n          <div\n            className={classNames(\n              'form-check',\n              {\n                'form-check-inline': inline,\n                'form-check-reverse': reverse,\n                'is-invalid': invalid,\n                'is-valid': valid,\n              },\n              className,\n            )}\n          >\n            <FormControl />\n            <FormLabel />\n            <FormValidation />\n          </div>\n        )\n      }\n\n      return <FormControl />\n    }\n\n    return <FormCheck />\n  },\n)\n\nCFormCheck.propTypes = {\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormCheck.displayName = 'CFormCheck'\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}