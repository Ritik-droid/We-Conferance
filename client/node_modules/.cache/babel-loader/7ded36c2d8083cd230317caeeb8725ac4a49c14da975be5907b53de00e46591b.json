{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../node_modules/classnames/index.js';\nimport { CCloseButton } from '../close-button/CCloseButton.js';\nimport { CModalContext } from './CModal.js';\nvar CModalHeader = forwardRef(function (_a, ref) {\n  var children = _a.children,\n    className = _a.className,\n    _b = _a.closeButton,\n    closeButton = _b === void 0 ? true : _b,\n    rest = __rest(_a, [\"children\", \"className\", \"closeButton\"]);\n  var setVisible = useContext(CModalContext).setVisible;\n  return React.createElement(\"div\", __assign({\n    className: classNames('modal-header', className)\n  }, rest, {\n    ref: ref\n  }), children, closeButton && React.createElement(CCloseButton, {\n    onClick: function () {\n      return setVisible(false);\n    }\n  }));\n});\nCModalHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeButton: PropTypes.bool\n};\nCModalHeader.displayName = 'CModalHeader';\nexport { CModalHeader };","map":{"version":3,"names":["CModalHeader","forwardRef","_a","ref","children","className","_b","closeButton","rest","__rest","setVisible","useContext","CModalContext","React","createElement","__assign","classNames","CCloseButton","onClick","propTypes","PropTypes","node","string","bool","displayName"],"sources":["C:\\Users\\ritik\\OneDrive\\Desktop\\Video-Call-App\\client\\node_modules\\@coreui\\react\\src\\components\\modal\\CModalHeader.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCloseButton } from '../close-button/CCloseButton'\nimport { CModalContext } from './CModal'\n\nexport interface CModalHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Add a close button component to the header.\n   */\n  closeButton?: boolean\n}\n\nexport const CModalHeader = forwardRef<HTMLDivElement, CModalHeaderProps>(\n  ({ children, className, closeButton = true, ...rest }, ref) => {\n    const { setVisible } = useContext(CModalContext)\n\n    return (\n      <div className={classNames('modal-header', className)} {...rest} ref={ref}>\n        {children}\n        {closeButton && <CCloseButton onClick={() => setVisible(false)} />}\n      </div>\n    )\n  },\n)\n\nCModalHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeButton: PropTypes.bool,\n}\n\nCModalHeader.displayName = 'CModalHeader'\n"],"mappings":";;;;;;IAkBaA,YAAY,GAAGC,UAAU,CACpC,UAACC,EAAoD,EAAEC,GAAG;EAAvD,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IAAEC,SAAS,GAAAH,EAAA,CAAAG,SAAA;IAAEC,EAAkB,GAAAJ,EAAA,CAAAK,WAAA;IAAlBA,WAAW,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IAAKE,IAAI,GAAAC,MAAA,CAAAP,EAAA,EAAlD,wCAAoD,CAAF;EACzC,IAAAQ,UAAU,GAAKC,UAAU,CAACC,aAAa,CAAC,CAAAF,UAA9B;EAElB,OACEG,KAAA,CAAAC,aAAA,QAAAC,QAAA;IAAKV,SAAS,EAAEW,UAAU,CAAC,cAAc,EAAEX,SAAS;EAAC,CAAM,EAAAG,IAAI,EAAE;IAAAL,GAAG,EAAEA;EAAG,IACtEC,QAAQ,EACRG,WAAW,IAAIM,KAAC,CAAAC,aAAA,CAAAG,YAAY,EAAC;IAAAC,OAAO,EAAE,SAAAA,CAAA,EAAM;MAAA,OAAAR,UAAU,CAAC,KAAK,CAAC;IAAA;EAAA,CAAI,EAC9D;AAEV,CAAC;AAGHV,YAAY,CAACmB,SAAS,GAAG;EACvBf,QAAQ,EAAEgB,SAAS,CAACC,IAAI;EACxBhB,SAAS,EAAEe,SAAS,CAACE,MAAM;EAC3Bf,WAAW,EAAEa,SAAS,CAACG;CACxB;AAEDvB,YAAY,CAACwB,WAAW,GAAG,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}