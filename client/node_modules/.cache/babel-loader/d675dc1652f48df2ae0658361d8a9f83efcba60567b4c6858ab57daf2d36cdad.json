{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../node_modules/classnames/index.js';\nimport { colorPropType } from '../../props.js';\nvar CTableRow = forwardRef(function (_a, ref) {\n  var _b;\n  var children = _a.children,\n    active = _a.active,\n    align = _a.align,\n    className = _a.className,\n    color = _a.color,\n    rest = __rest(_a, [\"children\", \"active\", \"align\", \"className\", \"color\"]);\n  return React.createElement(\"tr\", __assign({\n    className: classNames((_b = {}, _b[\"align-\".concat(align)] = align, _b['table-active'] = active, _b[\"table-\".concat(color)] = color, _b), className) || undefined\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCTableRow.propTypes = {\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType\n};\nCTableRow.displayName = 'CTableRow';\nexport { CTableRow };","map":{"version":3,"names":["CTableRow","forwardRef","_a","ref","children","active","align","className","color","rest","__rest","React","createElement","__assign","classNames","_b","concat","undefined","propTypes","PropTypes","bool","oneOf","node","string","colorPropType","displayName"],"sources":["C:\\Users\\ritik\\OneDrive\\Desktop\\Video-Call-App\\client\\node_modules\\@coreui\\react\\src\\components\\table\\CTableRow.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableRowProps extends HTMLAttributes<HTMLTableRowElement> {\n  /**\n   * Highlight a table row or cell..\n   */\n  active?: boolean\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top' | string\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUIâ€™s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableRow = forwardRef<HTMLTableRowElement, CTableRowProps>(\n  ({ children, active, align, className, color, ...rest }, ref) => {\n    return (\n      <tr\n        className={\n          classNames(\n            {\n              [`align-${align}`]: align,\n              'table-active': active,\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </tr>\n    )\n  },\n)\n\nCTableRow.propTypes = {\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableRow.displayName = 'CTableRow'\n"],"mappings":";;;;;IA4BaA,SAAS,GAAGC,UAAU,CACjC,UAACC,EAAsD,EAAEC,GAAG;;EAAzD,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IAAEC,MAAM,GAAAH,EAAA,CAAAG,MAAA;IAAEC,KAAK,GAAAJ,EAAA,CAAAI,KAAA;IAAEC,SAAS,GAAAL,EAAA,CAAAK,SAAA;IAAEC,KAAK,GAAAN,EAAA,CAAAM,KAAA;IAAKC,IAAI,GAAAC,MAAA,CAAAR,EAAA,EAApD,qDAAsD,CAAF;EACnD,OACES,KAAA,CAAAC,aAAA,OAAAC,QAAA;IACEN,SAAS,EACPO,UAAU,EAAAC,EAAA,OAENA,EAAA,CAAC,QAAS,CAAAC,MAAA,CAAAV,KAAK,CAAE,IAAGA,KAAK,EACzBS,EAAA,gBAAc,GAAEV,MAAM,EACtBU,EAAA,CAAC,QAAS,CAAAC,MAAA,CAAAR,KAAK,CAAE,IAAGA,KAAK,EAE3BO,EAAA,GAAAR,SAAS,CACV,IAAIU;EAAS,GAEZR,IAAI;IACRN,GAAG,EAAEA;EAAG,IAEPC,QAAQ,CACN;AAET,CAAC;AAGHJ,SAAS,CAACkB,SAAS,GAAG;EACpBb,MAAM,EAAEc,SAAS,CAACC,IAAI;EACtBd,KAAK,EAAEa,SAAS,CAACE,KAAK,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;EACnDjB,QAAQ,EAAEe,SAAS,CAACG,IAAI;EACxBf,SAAS,EAAEY,SAAS,CAACI,MAAM;EAC3Bf,KAAK,EAAEgB;CACR;AAEDxB,SAAS,CAACyB,WAAW,GAAG,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}